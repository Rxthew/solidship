/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/cjs.js!./src/solidstyles.css":
/*!*******************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./src/solidstyles.css ***!
  \*******************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \"./node_modules/css-loader/dist/runtime/noSourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n___CSS_LOADER_EXPORT___.push([module.id, \"@import url(https://fonts.googleapis.com/css2?family=Metal+Mania&display=swap);\"]);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"*,*::before,*::after{\\n    box-sizing: inherit;\\n    margin: 0;\\n    padding: 0;\\n}\\n\\nhtml {\\n    box-sizing: border-box;\\n}\\n\\n\\n\\nmain {\\n    display : flex;\\n    flex-direction: column;\\n    justify-content: flex-start;\\n    align-items: center\\n}\\n\\nheader {\\n    font-family: 'Metal Mania','cursive';\\n    font-size: x-large\\n}\\n\\ntd {\\n    height: 3rem;\\n    width: 3rem;\\n    border: 1px solid\\n}\\n\\ntd svg {\\n    height: 90%;\\n    width: 90%;\\n    padding: 0.1rem;\\n}\\n\\n\", \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n\n\n//# sourceURL=webpack://solidship/./src/solidstyles.css?./node_modules/css-loader/dist/cjs.js");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = \"\";\n      var needLayer = typeof item[5] !== \"undefined\";\n\n      if (item[4]) {\n        content += \"@supports (\".concat(item[4], \") {\");\n      }\n\n      if (item[2]) {\n        content += \"@media \".concat(item[2], \" {\");\n      }\n\n      if (needLayer) {\n        content += \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\");\n      }\n\n      content += cssWithMappingToString(item);\n\n      if (needLayer) {\n        content += \"}\";\n      }\n\n      if (item[2]) {\n        content += \"}\";\n      }\n\n      if (item[4]) {\n        content += \"}\";\n      }\n\n      return content;\n    }).join(\"\");\n  }; // import a list of modules into the list\n\n\n  list.i = function i(modules, media, dedupe, supports, layer) {\n    if (typeof modules === \"string\") {\n      modules = [[null, modules, undefined]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var k = 0; k < this.length; k++) {\n        var id = this[k][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _k = 0; _k < modules.length; _k++) {\n      var item = [].concat(modules[_k]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        continue;\n      }\n\n      if (typeof layer !== \"undefined\") {\n        if (typeof item[5] === \"undefined\") {\n          item[5] = layer;\n        } else {\n          item[1] = \"@layer\".concat(item[5].length > 0 ? \" \".concat(item[5]) : \"\", \" {\").concat(item[1], \"}\");\n          item[5] = layer;\n        }\n      }\n\n      if (media) {\n        if (!item[2]) {\n          item[2] = media;\n        } else {\n          item[1] = \"@media \".concat(item[2], \" {\").concat(item[1], \"}\");\n          item[2] = media;\n        }\n      }\n\n      if (supports) {\n        if (!item[4]) {\n          item[4] = \"\".concat(supports);\n        } else {\n          item[1] = \"@supports (\".concat(item[4], \") {\").concat(item[1], \"}\");\n          item[4] = supports;\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\n//# sourceURL=webpack://solidship/./node_modules/css-loader/dist/runtime/api.js?");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/noSourceMaps.js":
/*!**************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/noSourceMaps.js ***!
  \**************************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = function (i) {\n  return i[1];\n};\n\n//# sourceURL=webpack://solidship/./node_modules/css-loader/dist/runtime/noSourceMaps.js?");

/***/ }),

/***/ "./src/solidstyles.css":
/*!*****************************!*\
  !*** ./src/solidstyles.css ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleDomAPI.js */ \"./node_modules/style-loader/dist/runtime/styleDomAPI.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertBySelector.js */ \"./node_modules/style-loader/dist/runtime/insertBySelector.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ \"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/insertStyleElement.js */ \"./node_modules/style-loader/dist/runtime/insertStyleElement.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../node_modules/style-loader/dist/runtime/styleTagTransform.js */ \"./node_modules/style-loader/dist/runtime/styleTagTransform.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_solidstyles_css__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../node_modules/css-loader/dist/cjs.js!./solidstyles.css */ \"./node_modules/css-loader/dist/cjs.js!./src/solidstyles.css\");\n\n      \n      \n      \n      \n      \n      \n      \n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());\noptions.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());\n\n      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, \"head\");\n    \noptions.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());\noptions.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_solidstyles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"], options);\n\n\n\n\n       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_solidstyles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"] && _node_modules_css_loader_dist_cjs_js_solidstyles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals ? _node_modules_css_loader_dist_cjs_js_solidstyles_css__WEBPACK_IMPORTED_MODULE_6__[\"default\"].locals : undefined);\n\n\n//# sourceURL=webpack://solidship/./src/solidstyles.css?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

eval("\n\nvar stylesInDOM = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDOM.length; i++) {\n    if (stylesInDOM[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var indexByIdentifier = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3],\n      supports: item[4],\n      layer: item[5]\n    };\n\n    if (indexByIdentifier !== -1) {\n      stylesInDOM[indexByIdentifier].references++;\n      stylesInDOM[indexByIdentifier].updater(obj);\n    } else {\n      var updater = addElementStyle(obj, options);\n      options.byIndex = i;\n      stylesInDOM.splice(i, 0, {\n        identifier: identifier,\n        updater: updater,\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction addElementStyle(obj, options) {\n  var api = options.domAPI(options);\n  api.update(obj);\n\n  var updater = function updater(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {\n        return;\n      }\n\n      api.update(obj = newObj);\n    } else {\n      api.remove();\n    }\n  };\n\n  return updater;\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDOM[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDOM[_index].references === 0) {\n        stylesInDOM[_index].updater();\n\n        stylesInDOM.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://solidship/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

eval("\n\nvar memo = {};\n/* istanbul ignore next  */\n\nfunction getTarget(target) {\n  if (typeof memo[target] === \"undefined\") {\n    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n      try {\n        // This will throw an exception if access to iframe is blocked\n        // due to cross-origin restrictions\n        styleTarget = styleTarget.contentDocument.head;\n      } catch (e) {\n        // istanbul ignore next\n        styleTarget = null;\n      }\n    }\n\n    memo[target] = styleTarget;\n  }\n\n  return memo[target];\n}\n/* istanbul ignore next  */\n\n\nfunction insertBySelector(insert, style) {\n  var target = getTarget(insert);\n\n  if (!target) {\n    throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n  }\n\n  target.appendChild(style);\n}\n\nmodule.exports = insertBySelector;\n\n//# sourceURL=webpack://solidship/./node_modules/style-loader/dist/runtime/insertBySelector.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction insertStyleElement(options) {\n  var element = document.createElement(\"style\");\n  options.setAttributes(element, options.attributes);\n  options.insert(element, options.options);\n  return element;\n}\n\nmodule.exports = insertStyleElement;\n\n//# sourceURL=webpack://solidship/./node_modules/style-loader/dist/runtime/insertStyleElement.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\n/* istanbul ignore next  */\nfunction setAttributesWithoutAttributes(styleElement) {\n  var nonce =  true ? __webpack_require__.nc : 0;\n\n  if (nonce) {\n    styleElement.setAttribute(\"nonce\", nonce);\n  }\n}\n\nmodule.exports = setAttributesWithoutAttributes;\n\n//# sourceURL=webpack://solidship/./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction apply(styleElement, options, obj) {\n  var css = \"\";\n\n  if (obj.supports) {\n    css += \"@supports (\".concat(obj.supports, \") {\");\n  }\n\n  if (obj.media) {\n    css += \"@media \".concat(obj.media, \" {\");\n  }\n\n  var needLayer = typeof obj.layer !== \"undefined\";\n\n  if (needLayer) {\n    css += \"@layer\".concat(obj.layer.length > 0 ? \" \".concat(obj.layer) : \"\", \" {\");\n  }\n\n  css += obj.css;\n\n  if (needLayer) {\n    css += \"}\";\n  }\n\n  if (obj.media) {\n    css += \"}\";\n  }\n\n  if (obj.supports) {\n    css += \"}\";\n  }\n\n  var sourceMap = obj.sourceMap;\n\n  if (sourceMap && typeof btoa !== \"undefined\") {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  options.styleTagTransform(css, styleElement, options.options);\n}\n\nfunction removeStyleElement(styleElement) {\n  // istanbul ignore if\n  if (styleElement.parentNode === null) {\n    return false;\n  }\n\n  styleElement.parentNode.removeChild(styleElement);\n}\n/* istanbul ignore next  */\n\n\nfunction domAPI(options) {\n  var styleElement = options.insertStyleElement(options);\n  return {\n    update: function update(obj) {\n      apply(styleElement, options, obj);\n    },\n    remove: function remove() {\n      removeStyleElement(styleElement);\n    }\n  };\n}\n\nmodule.exports = domAPI;\n\n//# sourceURL=webpack://solidship/./node_modules/style-loader/dist/runtime/styleDomAPI.js?");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("\n\n/* istanbul ignore next  */\nfunction styleTagTransform(css, styleElement) {\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css;\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild);\n    }\n\n    styleElement.appendChild(document.createTextNode(css));\n  }\n}\n\nmodule.exports = styleTagTransform;\n\n//# sourceURL=webpack://solidship/./node_modules/style-loader/dist/runtime/styleTagTransform.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_UI__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/UI */ \"./src/modules/UI.js\");\n/* harmony import */ var _solidstyles_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./solidstyles.css */ \"./src/solidstyles.css\");\n\n\n\n\n(0,_modules_UI__WEBPACK_IMPORTED_MODULE_0__.landingPage)()\n\n//# sourceURL=webpack://solidship/./src/index.js?");

/***/ }),

/***/ "./src/modules/AI.js":
/*!***************************!*\
  !*** ./src/modules/AI.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AIObj\": () => (/* binding */ AIObj),\n/* harmony export */   \"AIReact\": () => (/* binding */ AIReact),\n/* harmony export */   \"updateStatus\": () => (/* binding */ updateStatus),\n/* harmony export */   \"sendStatus\": () => (/* binding */ sendStatus),\n/* harmony export */   \"gameAI\": () => (/* binding */ gameAI),\n/* harmony export */   \"updateAIWrapper\": () => (/* binding */ updateAIWrapper),\n/* harmony export */   \"triggerAIEvts\": () => (/* binding */ triggerAIEvts),\n/* harmony export */   \"subscribeAIEvts\": () => (/* binding */ subscribeAIEvts)\n/* harmony export */ });\n/* harmony import */ var _gameboard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameboard */ \"./src/modules/gameboard.js\");\n/* harmony import */ var _gamestate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gamestate */ \"./src/modules/gamestate.js\");\n/* harmony import */ var _ships__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ships */ \"./src/modules/ships.js\");\n\nconst [getLgalMovs, getSt, newBrd] = [_gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getBoardLegalMoves, _gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getState, _gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.newBoard]\nconst [getBrd, getBCont, setBCont] = [_gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getBoard, _gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getBoardContains, _gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.setBoardContains]\nconst [getW, setW, getP, setP] = [_gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getWreckCount, _gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.setWreckCount, _gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getPlantCount, _gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.setPlantCount]\n;\n\nconst getC = _ships__WEBPACK_IMPORTED_MODULE_2__.getShipCount\nconst getD = _ships__WEBPACK_IMPORTED_MODULE_2__.getDamage\nconst setD = _ships__WEBPACK_IMPORTED_MODULE_2__.setDamage\nconst shipSunk = _ships__WEBPACK_IMPORTED_MODULE_2__.getIsSunk\nconst getE = _ships__WEBPACK_IMPORTED_MODULE_2__.getEquipmentType\nconst setE = _ships__WEBPACK_IMPORTED_MODULE_2__.setEquipmentType\n\nconst AIObj = class {\n    constructor(gameState=new _gameboard__WEBPACK_IMPORTED_MODULE_0__.gameBoard('new game'),triangulation=false,phase=0, hit=null, target=null ){\n        this.gameState = gameState,\n        this.triangulation = triangulation,\n        this.phase = phase,\n        this.hit = hit,\n        this.target = target\n    }\n}\n\nconst _generatePseudoRandomKey = function(){\n    const centralColumns = ['B','C','D','E']\n    const centralRows = ['2','3','4','5']\n    const wholeColumns = ['A','B','C','D','E','F']\n    const wholeRows = ['1','2','3','4','5','6']\n\n    let columnChoice = Math.floor((Math.random() * 10)) <= 1 ? centralColumns : wholeColumns \n    let rowChoice = Math.floor((Math.random() * 10)) <= 1 ? centralRows : wholeRows\n\n    let columnIndex = Math.floor((Math.random() * columnChoice.length)) \n    let rowIndex = Math.floor((Math.random() * rowChoice.length))\n\n    return `${columnChoice[columnIndex]}${rowChoice[rowIndex]}`\n}\n\n\nconst _decisionByPhaseNo = { \n    \n    '1' : function(someHitKey, someTargets, someTargetIndex){\n        if(Math.floor((Math.random() * 10)) <= 5){\n            return someHitKey\n        }    \n        return someTargets[someTargetIndex]\n    },\n\n    '2' : function(someHitKey, someTargets, someTargetIndex, legalKeyGen = (akeyVar) => getLgalMovs(new _gameboard__WEBPACK_IMPORTED_MODULE_0__.gameBoard().board, akeyVar)){\n        let pivot = Math.floor((Math.random() * 10))\n        if(pivot <= 2){\n            return someTargets[someTargetIndex]\n        }\n        else if(pivot <= 4){\n            return someHitKey\n        }\n        else{\n            let widerTarget = []\n            for (let key of someTargets){\n                widerTarget = [...widerTarget, ...legalKeyGen(key)]\n            }\n            widerTarget = [...new Set(widerTarget)]\n            let widerTargetIndex = Math.floor((Math.random() * widerTarget.length))\n            return widerTarget[widerTargetIndex] \n        }    \n    },\n}\n\nconst _triangulateKeyGenerator = function(hitKey, phaseNo=1,someBoard=new _gameboard__WEBPACK_IMPORTED_MODULE_0__.gameBoard('some board'),targetKeys=[...someBoard.board[hitKey].legalMoves]){\n    let targetIndex = Math.floor((Math.random() * targetKeys.length))\n    return _decisionByPhaseNo[phaseNo.toString()](hitKey,targetKeys,targetIndex)      \n}\n\n\nconst _missileHitMode = function(propsObj){\n        \n    return {\n        triangulation : true,\n        phase : 1,\n        hit : propsObj.target,\n        target : propsObj.target\n    }\n\n}\n\nconst _shipSunkMode = function(propsObj){\n    return {\n        triangulation : false,\n        phase : 0,\n        hit : null,\n        target : propsObj.target\n    }\n\n}\n\nconst _missedMissileMode = function(propsObj){\n    if (propsObj.phase === 1){\n        return {\n            triangulation: true,\n            phase : 2,\n            hit : propsObj.hit,\n            target : propsObj.target\n        }\n\n    }\n    return {\n        triangulation : false,\n        phase : 0,\n        hit : null,\n        target : propsObj.target\n    }\n    \n\n}\n\nconst _stateOptions = {\n\n    'missile hit ship' : _missileHitMode,\n    'missile blocked' : _missileHitMode,\n    'missile barrage' : _missileHitMode,\n    'missile sunk ship': _shipSunkMode,\n    'missile missed ship':  _missedMissileMode\n}\n\nconst _configureMode = function(someState, phase, hit, target){\n\n    \n    let propsObj = {\n        phase,\n        hit,\n        target\n    }  \n\n    return _stateOptions[someState](propsObj)\n\n}\n\n\nconst AIReact = function(currentAIObject, gs=getSt, gbs=[newBrd,getBrd,getW,getP]){\n    \n    let currentGameState = currentAIObject.gameState\n    let currentState = gs(currentGameState)\n    const [ngb,gb] = gbs;\n    \n\n    if(Object.keys(_stateOptions).includes(currentState)){\n        let newObject = new AIObj(currentGameState)\n        newObject = Object.assign(newObject,_configureMode(currentState,currentAIObject.phase,currentAIObject.hit,currentAIObject.target))\n        return newObject\n    }\n\n    if(currentAIObject.triangulation){ \n        let key = _triangulateKeyGenerator(currentAIObject.hit, currentAIObject.phase)\n        let newGameState = { gameState: ngb(`${key}`)}\n        Object.assign(gb(newGameState.gameState), gb(currentGameState))\n        Object.assign(newGameState.gameState, {wreckage : getW(currentGameState)}, {plants : getP(currentGameState)})\n        let newTarget = {target : `${key}`}\n        let newObject = new AIObj()\n        newObject = Object.assign(newObject, currentAIObject, newGameState, newTarget )\n        return newObject\n    }\n    let key = _generatePseudoRandomKey() \n    let newGameState = { gameState: ngb(`${key}`)}\n    Object.assign(gb(newGameState.gameState), gb(currentGameState))\n    Object.assign(newGameState.gameState, {wreckage : getW(currentGameState)}, {plants : getP(currentGameState)})\n    let newTarget = {target : `${key}`}\n    let newObject = new AIObj()\n    newObject = Object.assign(newObject, currentAIObject, newGameState, newTarget )\n    return newObject\n}\n\nconst _sunkVesselCheckUpdate = function(vesselSunk, vessel){ \n    if(vesselSunk){\n        return null\n    }\n    return vessel\n}\n\nconst _generateDamage = function(hitShip,hitValue=1,getdmg=getD,setdmg=setD,sunk=shipSunk){\n     let newval = getdmg(hitShip) + hitValue\n     setdmg(hitShip,newval)\n     return _sunkVesselCheckUpdate(sunk(hitShip), hitShip)\n}\n\nconst _missileBlockingCheck = function(board, target, getCont=getBCont, setCont=setBCont){\n    if(Object.prototype.hasOwnProperty.call(board,'missileBlocked')){\n        let keys = board.missileBlocked \n        const newBoard = Object.assign({},board)\n        delete newBoard.missileBlocked\n        const newContainsObj = (0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.createContainsObject)(newBoard, null, null, getCont)\n        ;(0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.updateBoardContents)(newBoard,newContainsObj, setCont)\n\n        if(keys.includes(target)){\n            newBoard.missileBlocked = true\n            return newBoard         \n        }\n        return newBoard\n        \n    }\n    const oldBoard = Object.assign({},board)\n    const oldContainsObj = (0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.createContainsObject)(board, null, null, getCont)\n    ;(0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.updateBoardContents)(oldBoard,oldContainsObj, setCont)\n\n    return oldBoard\n\n}\n\nconst _wreckageCounter = function(someBoard, getState, getWreckage, setWreckage, newBoard){\n    const state = getState(someBoard)\n    const options = Object.keys(_stateOptions)\n    const values = [2,2,2,5,1]\n    let rubric = {}\n    for(let x = 0; x < options.length; x++){\n        rubric[options[x]] = values[x]\n    }\n    const currentWreckage = getWreckage(someBoard)\n    const newWreckage = currentWreckage + rubric[state]\n    const newGB = newBoard()\n    Object.assign(newGB, someBoard)\n    return setWreckage(newGB, newWreckage)\n}\n\nconst _discountContribution = function(someBoard, someCount, getState, getWreckage, setWreckage, getPlants, setPlants, newBoard){\n\n    let newB = newBoard('missile sunk ship');\n    Object.assign(newB, someBoard)\n\n    const _discountPlants = function(){\n        let shipRef = someCount.plants;\n        let boardRef = getPlants(someBoard);\n        let newRef = boardRef - shipRef\n        \n        if(newRef < 0){\n            setPlants(newB, 0)\n            \n        }\n        else{\n            setPlants(newB, newRef)\n        }\n        \n    }\n\n    const _discountWreckage = function(){\n        let shipRef = someCount.wreckage;\n        let boardRef = getWreckage(someBoard);\n        let newRef = boardRef + shipRef\n        setWreckage(newB, newRef)\n    }\n    \n    if(getState(someBoard) === 'missile sunk ship'){\n        const props = {'plants' : _discountPlants,\n                       'wreckage': _discountWreckage};\n        for(let elem of Object.keys(props)){\n            if(Object.prototype.hasOwnProperty.call(someCount, elem)){\n                props[elem]()\n            }\n        }\n        return newB\n\n    }\n    return someBoard\n\n}\n\nconst _equipmentDependencyGuard = function(someBoard,ship,gs=getSt,ge=getE,gd=_ships__WEBPACK_IMPORTED_MODULE_2__.getDamage){\n    let state = gs(someBoard)\n    if(state !== 'missile hit ship'){\n        return false\n    }\n    if(Object.prototype.hasOwnProperty.call(ge(ship),'error')){\n        return false\n    }\n    if(gd(ship) >= 2 && ge(ship).filter(part => part !== 'modern').length === 0){\n        return true\n    }\n    return 'pass'\n}\n\nconst _equipmentDependencyCost = function(ship, ge=getE, se=setE){\n\n    const classicDamage = function(){\n        let classics = ge(ship).filter(part => part === 'classic')\n        if(classics.length === 0){\n            return ship\n        }\n        let newShip = Object.assign(Object.create(Object.getPrototypeOf(ship)),ship)\n        let newEq = [...ge(ship)]\n        newEq.splice(newEq.indexOf('classic'),1,'classic (damaged)')\n        se(newShip,newEq)\n        return newShip\n    }\n\n    const modernDamage = function(){\n        let noModern = ge(ship).filter(part => part !== 'modern')\n        let newShip = Object.assign(Object.create(Object.getPrototypeOf(ship)),ship)\n        se(newShip,noModern)\n        return newShip \n    }\n\n    let noDamage = ge(ship).filter(part => part !== 'classic (damaged)')\n    if(noDamage.length === 0){\n        return ship\n    }\n    if(noDamage[0] !== 'modern'){ \n        return classicDamage()\n    }\n    return modernDamage()\n}\n\n   \nconst _hitCheckingMechanism = function(key, currentGameState, currentBoard, gs=getSt, nb=newBrd, gb=getBrd, getKey=getBCont, setKey=setBCont,gw=getW,sw=setW,gp=getP,sp=setP, gc=getC, ge=getE, se=setE, gd=getD,sd=setD,sunk=shipSunk){\n    \n    const currentBoardChecked = _missileBlockingCheck(currentBoard,key,getKey,setKey)\n    if(Object.prototype.hasOwnProperty.call(currentBoardChecked, 'missileBlocked')){\n        let blocked = nb('missile blocked')\n        Object.assign(blocked, {wreckage : gw(currentGameState)}, {plants: gp(currentGameState)})\n        let blockedBoard = gb(blocked)\n        let blockedContainsObj = (0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.createContainsObject)(currentBoardChecked,null,null,getKey)\n        delete blockedContainsObj.missileBlocked\n        ;(0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.updateBoardContents)(blockedBoard, blockedContainsObj, setKey)\n        blocked = _wreckageCounter(blocked, gs, gw, sw,nb)\n        return blocked\n    }\n    \n    let loc = getKey(currentBoardChecked, key)\n    if(loc === null){\n        let missed = nb('missile missed ship');\n        Object.assign(missed, {wreckage : gw(currentGameState)},{plants: gp(currentGameState)})\n        let missedBoard = gb(missed)\n        let missedContainsObj = (0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.createContainsObject)(currentBoardChecked, null,null, getKey)\n        ;(0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.updateBoardContents)(missedBoard, missedContainsObj, setKey)\n        missed = _wreckageCounter(missed, gs, gw, sw, nb)\n        return missed\n    }\n    \n    let updatedValue = Object.assign(Object.create(Object.getPrototypeOf(loc)),loc)\n    let shipActionCount = gc(updatedValue) \n    updatedValue = _generateDamage(updatedValue,1,gd,sd,sunk)\n    let vesselStatus = updatedValue === null ? nb('missile sunk ship') : nb('missile hit ship')\n    vesselStatus = _equipmentDependencyGuard(vesselStatus,updatedValue,gs,ge,gd) === true ? nb('missile barrage') : vesselStatus\n    Object.assign(vesselStatus,{wreckage : gw(currentGameState)},{plants: gp(currentGameState)})\n    vesselStatus = _wreckageCounter(vesselStatus, gs, gw, sw, nb)\n    vesselStatus = _discountContribution(vesselStatus, shipActionCount,gs,gw,sw,gp,sp,nb)\n    updatedValue = _equipmentDependencyGuard(vesselStatus,updatedValue,gs,ge,gd) === 'pass' ?  _equipmentDependencyCost(updatedValue,ge,se) : updatedValue\n    let containsObj = (0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.createContainsObject)(currentBoardChecked, key, updatedValue, getKey)\n    let boardWithUpdatedVessel = gb(vesselStatus)\n\n    ;(0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.updateBoardContents)(boardWithUpdatedVessel,containsObj, setKey)\n\n    return vesselStatus\n}\n\n\nconst updateStatus = function(currentAIObject, gs=getSt, gbs=[newBrd,getBrd,getBCont,setBCont,getW,setW,getP,setP],gc=getC,ge=getE,se=setE, gd=getD,sd=setD,sunk=shipSunk){\n    let gb = gbs[1]\n    let currentGameState = currentAIObject.gameState;\n    let currentState = gs(currentGameState);\n    let currentBoard = gb(currentGameState)\n    let keys = Object.keys(currentBoard)\n    if(keys.includes(currentState)){\n        let updatedAIObject = new AIObj()\n        updatedAIObject = Object.assign(updatedAIObject, currentAIObject, {gameState: _hitCheckingMechanism(currentState, currentGameState, currentBoard, gs, ...gbs,gc,ge,se,gd,sd,sunk)})\n        return updatedAIObject\n    }\n    else{\n        return currentAIObject\n\n    }    \n    \n}\n\nconst sendStatus = function(currentAIObject, gs=getSt,publish=_gamestate__WEBPACK_IMPORTED_MODULE_1__.gameEvents.publish, us=_gamestate__WEBPACK_IMPORTED_MODULE_1__.updateState){\n    \n    let currentGameState = currentAIObject.gameState\n    let currentState = gs(currentGameState)\n    if(Object.keys(_stateOptions).includes(currentState)){\n        publish('updateAIObj', AIReact) \n        publish('updateGameState',us, currentGameState)\n        publish('renderGameState',currentGameState)\n        publish('renderImpact', currentGameState, gameAI.sessionAI.target)\n        publish('senseEvent', currentGameState)\n        let updatedStateAIObj = us(AIReact(currentAIObject),currentGameState) \n        if(currentState === 'missile barrage'){\n            publish('triggerAI')\n            publish('triggerAI')\n        }            \n        return updatedStateAIObj\n    }\n    return \n}\n\n\nlet gameAI = {sessionAI : new AIObj()}\n\nconst updateAIWrapper = function(someFunc,...params){\n    gameAI.sessionAI = someFunc(gameAI.sessionAI, ...params)\n    console.log(gameAI.sessionAI.target)\n    return\n}\n\nconst triggerAIEvts = function(somePubFunc=_gamestate__WEBPACK_IMPORTED_MODULE_1__.gameEvents.publish, aiReactParams=[getSt, [newBrd,getBrd,getW,getP]],updateStatParams=[getSt, [newBrd,getBrd,getBCont,setBCont,getW,setW,getP,setP],getC,getE,setE,getD,setD,shipSunk], sendStatParams=[getSt,somePubFunc=_gamestate__WEBPACK_IMPORTED_MODULE_1__.gameEvents.publish, _gamestate__WEBPACK_IMPORTED_MODULE_1__.updateState]){\n    somePubFunc('updateAIObj', AIReact, ...aiReactParams)\n    somePubFunc('updateAIObj', updateStatus,...updateStatParams)\n    somePubFunc('updateAIObj', sendStatus,...sendStatParams)\n    return\n}\n\nconst subscribeAIEvts = function(someSubFunc=_gamestate__WEBPACK_IMPORTED_MODULE_1__.gameEvents.subscribe){\n    someSubFunc('updateGameState',updateAIWrapper)\n    someSubFunc('updateAIObj',updateAIWrapper)\n    someSubFunc('triggerAI', triggerAIEvts)\n    return    \n\n}\n\n\n\n\n\n//# sourceURL=webpack://solidship/./src/modules/AI.js?");

/***/ }),

/***/ "./src/modules/UI.js":
/*!***************************!*\
  !*** ./src/modules/UI.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"renderState\": () => (/* binding */ renderState),\n/* harmony export */   \"createDispatchLog\": () => (/* binding */ createDispatchLog),\n/* harmony export */   \"printLog\": () => (/* binding */ printLog),\n/* harmony export */   \"printValues\": () => (/* binding */ printValues),\n/* harmony export */   \"landingPage\": () => (/* binding */ landingPage),\n/* harmony export */   \"subscribeUIEvents\": () => (/* binding */ subscribeUIEvents)\n/* harmony export */ });\n/* harmony import */ var _gameboard_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameboard.js */ \"./src/modules/gameboard.js\");\n/* harmony import */ var _gamestate_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gamestate.js */ \"./src/modules/gamestate.js\");\n/* harmony import */ var _ships_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ships.js */ \"./src/modules/ships.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"./src/modules/utils.js\");\n\n\n\n\n\nconst _buildBoard = function(){\n    const lets = ['A','B','C','D','E','F']\n    const nums = ['1','2','3','4','5','6']\n\n    const gameBoard = document.createElement('table')\n    gameBoard.classList.add('gamezone')\n    const gameBody = document.createElement('tbody')\n    const rowHead = document.createElement('tr')\n    const whiteSpace = document.createElement('th')\n    rowHead.appendChild(whiteSpace)\n    \n    gameBoard.appendChild(gameBody)\n\n    for(let elem of lets){\n        let th = document.createElement('th')\n        th.textContent = elem\n        rowHead.appendChild(th)\n    }\n    gameBody.appendChild(rowHead)\n    for(let elem of nums){\n        let tr = document.createElement('tr')\n        let th = document.createElement('th')\n        th.textContent = elem\n        tr.appendChild(th)\n        for(let letr of lets){\n            let td = document.createElement('td')\n            tr.appendChild(td)\n            td.id = `${letr}${elem}`\n            td.classList.add('zone') \n        }\n        gameBody.appendChild(tr)\n    }\n    return gameBoard\n}\n\n\nconst _skipTurn = function(){\n    let skip = document.createElement('button')\n    skip.textContent = 'Skip Turn'\n    skip.classList.add('skip')\n    skip.onclick = //still to fill in. incroporate in context of effectAction\n    document.querySelector('.mainConsole').appendChild(skip)\n    return skip\n\n}\n\n\nconst createMainConsole = function(){\n    if(document.querySelector('.mainConsole')){\n        document.querySelector('.mainConsole').remove()\n    }\n    let mainConsole = document.createElement('div')\n    mainConsole.classList.add('mainConsole')\n    document.querySelector('main').appendChild(mainConsole)\n    return mainConsole\n\n}\n\n\nconst recordPathHelpers = function(){\n\n    let addNewPath = function(obj, currentPath, prop, paths){\n        let first = obj\n        if(currentPath){\n            for(let elem of currentPath){\n                if(elem === currentPath[currentPath.length - 1]){\n                    paths.push([...currentPath, prop])\n                }\n                first = first[elem]\n            } \n        }\n        else{\n            paths.push([prop])\n\n        }\n    }\n\n    let initialInjection = function(obj,paths){\n        for(let elem of Object.keys(obj)){\n            addNewPath(obj,null,elem,paths)\n        }\n    }\n\n    let finalisePath = function(obj,paths,confirmedPaths){\n        let first = obj\n            for(let path of paths){\n                for(let elem of path){\n                    if(elem === path[path.length - 1]){\n                        if(Array.isArray(first[elem]) || typeof first[elem] === 'string' || typeof first[elem] === 'number'){\n                             confirmedPaths = [...confirmedPaths, path]\n                             delete paths[paths.indexOf(path)]      \n                        }\n                        else if(typeof first[elem] === 'object'){\n                            let newCheckPoints = Object.keys(first[elem])\n                            for(let checkPoint of newCheckPoints){\n                                addNewPath(obj,path,checkPoint,paths)\n                            }\n                            delete paths[paths.indexOf(path)]\n                        }\n                    }\n                    first = first[elem]\n                }\n                first = obj\n            }\n            paths = paths.filter(path => path !== undefined)\n            return  confirmedPaths \n    }\n\n    let chartPath = function(event, initParent='viewConsole', propTitle='propertyTitle'){\n        let parent = event.target.parentElement\n        let prop = event.target.id\n        let path = [prop]\n        while(parent !== document.querySelector(`.${initParent}`)){\n            if(parent === document.querySelector('body')){\n                return\n            }\n            parent = parent.parentElement\n            let children = Array.from(parent.children)\n            children = children.filter(child => child.classList.contains(`${propTitle}`))\n            if(children.length === 0){\n                return path\n            } \n            path.unshift(children[0].id)      \n        }\n        return path\n    }    \n    return {\n        addNewPath,\n        initialInjection,\n        finalisePath,\n        chartPath\n    }\n\n}\n\n\nconst _createViewConsole = function(){\n    if(document.querySelector('.viewConsole')){\n        document.querySelector('.viewConsole').remove()\n    }\n    let viewConsole = document.createElement('div')\n    viewConsole.classList.add('viewConsole')\n    document.querySelector('.mainConsole').appendChild(viewConsole) \n    return document.querySelector('.viewConsole')\n\n}\n\n\nconst _recordPaths = function(someGb,key, someGetCont=_gameboard_js__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getBoardContains){\n    let paths = []\n    let confirmedPaths = []\n    let obj = someGetCont(someGb,key)\n    \n    \n    let initialInjection = recordPathHelpers().initialInjection\n    initialInjection(obj,paths)\n\n    confirmedPaths = recordPathHelpers().finalisePath(obj,paths,confirmedPaths)\n    return confirmedPaths\n}\n\nconst revealProps = {\n    determineUIKey : function(parent, key, propName='property',propTitleName='propertyTitle'){\n        let children = Array.from(parent.children)\n        for(let child of children){\n            if(child.classList.contains(key)){\n                return child\n            }\n        }\n        return this.keyToUIelement(parent,key,propName,propTitleName)\n\n\n    },\n    keyToUIelement : function(parent,key,propName='property',propTitleName='propertyTitle'){\n        let prop = document.createElement('div')\n        let title = document.createElement('span')\n        prop.classList.add(`${propName}`)\n        prop.classList.add(`${key}`)\n        title.classList.add(`${propTitleName}`)\n        title.id = key        \n        title.textContent = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.camelPhraseParser)(key) \n        prop.appendChild(title)\n        parent.appendChild(prop)\n        return prop\n        },\n    valueToUIelement : function(par,val,valContainerName='container',valName='element'){\n        if(Array.isArray(val)){ \n            let container = document.createElement('div')\n            container.classList.add(`${valContainerName}`)\n            for(let elem of val){\n                let uiElement = document.createElement('span')\n                uiElement.classList.add(`${valName}`)\n                uiElement.id = elem\n                uiElement.textContent = elem\n                container.appendChild(uiElement)\n            }\n            par.appendChild(container)\n            return container\n        }\n        else if(typeof val === 'string'){\n            let uiElement = document.createElement('span')\n            uiElement.classList.add(`${valName}`)\n            uiElement.id = val\n            uiElement.textContent = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.camelPhraseParser)(val)\n            par.appendChild(uiElement)\n            return uiElement\n        }\n        else if(typeof val === 'number'){\n            let uiElement = document.createElement('span')\n            uiElement.classList.add(`numeral`)\n            uiElement.textContent = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.camelPhraseParser)(val)\n            par.appendChild(uiElement)\n            return uiElement\n        }\n        \n    },        \n}\n\nconst _primaryMarker = function(par){\n    let container = Array.from(par.children).filter(child => child.classList.contains('container'))\n    let referencePoint = container.length > 0 ? container[0] : par\n    let children = Array.from(referencePoint.children).filter(child => child.classList.contains('element'))\n    if(children.length > 0){\n        let primary = children[0]\n        if(!primary.classList.contains('primary')){\n            primary.classList.add('primary')\n        }   \n    }\n    return\n}\n\nconst _numeralPropStatus = function(val,par,titleType='propertyTitle',parType='property', parNewType='element'){\n    let ruledOut = ['damage','breakpoint','reinforcedBreakpoint']\n    if(val.classList.contains('numeral')){\n        let title = Array.from(par.children).filter(sib => sib.classList.contains(`${titleType}`))[0]\n        if(!ruledOut.includes(title.id)){\n            par.classList.remove(`${parType}`)\n            par.classList.add(`${parNewType}`)\n            title.classList.remove(`${titleType}`)\n            title.classList.add('countTitle')\n        }\n    }\n\n}\n        \n      \n      \n\nconst displayShip = function(event, someGameState, someGetCont=_gameboard_js__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getBoardContains, gb=_gameboard_js__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getBoard){\n    let someGb= gb(someGameState)\n    let key = event.target.id\n    let paths = _recordPaths(someGb, key,someGetCont)\n    let viewConsole = _createViewConsole()\n    let shipObj = someGetCont(someGb,key)\n    \n    for(let path of paths){\n        let finalTarget = shipObj\n        let parent = viewConsole\n        for (let elem of path){\n            if(elem === path[path.length - 1]){\n                parent = revealProps.determineUIKey(parent,elem) \n                let value = finalTarget[elem]\n                value = revealProps.valueToUIelement(parent,value)\n                if(elem === 'action' || elem === 'messagingProtocol'){\n                    _primaryMarker(parent)\n                }\n                _numeralPropStatus(value,parent)\n            }  \n            else {\n                parent = revealProps.determineUIKey(parent,elem) \n            }\n            finalTarget = finalTarget[elem]\n        }\n    }\n    return viewConsole\n    \n}\n\nconst standardShipStore = {\n    'Basic' : function(){return new _ships_js__WEBPACK_IMPORTED_MODULE_2__.basicShip()},\n    'Basic (Legacy)' : function(){return new _ships_js__WEBPACK_IMPORTED_MODULE_2__.basicLegacyShip()},\n    'Legacy' : _ships_js__WEBPACK_IMPORTED_MODULE_2__.legacyShip,\n    'Planting' : _ships_js__WEBPACK_IMPORTED_MODULE_2__.plantingShip,\n    'Defense' : _ships_js__WEBPACK_IMPORTED_MODULE_2__.defenseShip,\n    'Clearing' : _ships_js__WEBPACK_IMPORTED_MODULE_2__.clearingShip\n //**Relay method below has been retained here for the sake of completion only. In practice, this is not available.*/\n // 'Relay' : ships.relayShip,\n //***/\n    \n}\n\nconst _shipStore = function(shipsObj=standardShipStore){\n    if(document.querySelector('.shipStore')){\n        document.querySelector('.shipStore').remove()\n    }\n    let store = document.createElement('div')\n    store.classList.add('shipStore')\n    let choices = Object.keys(shipsObj)\n    for (let elem of choices){\n        let ship = document.createElement('span')\n        ship.textContent = elem\n        ship.classList.add('shipOption')\n        store.appendChild(ship) \n    }\n    return store\n\n}\n\nconst _recordComponentPaths = function(obj){\n    let paths = []\n    let confirmedPaths = []\n\n    let initialInjection = recordPathHelpers().initialInjection\n    initialInjection(obj,paths)\n\n    confirmedPaths = recordPathHelpers().finalisePath(obj,paths,confirmedPaths)\n    return confirmedPaths\n\n}\n\nconst _componentFilter = function(componentsObj=_ships_js__WEBPACK_IMPORTED_MODULE_2__.components){\n    let allPropTitles = Array.from(document.querySelectorAll('.propertyTitle')).map(title => title.id)\n    if(allPropTitles.includes('action')){\n        let allProps = Array.from(document.querySelectorAll('.propertyTitle'))\n        let act = allProps[allPropTitles.indexOf('action')].parentElement\n        const firstAct = (function(){\n            for(let elem of Array.from(act.children)){\n                if(elem.classList.contains('container')){\n                    let action = Array.from(elem.children)[0]\n                    return action.textContent\n                }\n            }\n        })()\n        return componentsObj(firstAct) \n    }\n    else{\n        let comp = componentsObj()\n        for(let key of Object.keys(comp)){\n            if(key !== 'action'){\n                delete comp[key]\n            }\n        }\n        return comp\n    }\n}\n\n\n\n\nconst _componentStore = function(componentsObj=_componentFilter(_ships_js__WEBPACK_IMPORTED_MODULE_2__.components),path=_recordComponentPaths(componentsObj)){\n    if(document.querySelector('.optConsole')){\n        document.querySelector('.optConsole').remove()\n    }\n    \n    let store = document.createElement('div')\n    store.classList.add('componentStore')\n    let main = document.querySelector('.mainConsole')\n    for(let iteration of path){\n        let finalTarget = componentsObj\n        let parent = store\n        for (let elem of iteration){\n            if(elem === iteration[iteration.length - 1]){\n                parent = revealProps.determineUIKey(parent,elem,'compProperty','compPropertyTitle') \n                let value = finalTarget[elem]\n                value = revealProps.valueToUIelement(parent,value,'compContainer','compElement')\n                _numeralPropStatus(value,parent,'compPropertyTitle','compProperty','compElement')\n            }\n            else {\n                parent = revealProps.determineUIKey(parent,elem, 'compProperty','compPropertyTitle') \n            }\n            finalTarget = finalTarget[elem]\n        }\n    \n    }\n    main.appendChild(store)\n\n     \n}\n\nconst _filterComponentPaths = function(event,componentsObj=_componentFilter(_ships_js__WEBPACK_IMPORTED_MODULE_2__.components)){\n    let initPath = recordPathHelpers().chartPath(event)\n    let allPaths = _recordComponentPaths(componentsObj)\n    let allCopy = [...allPaths]\n    let ind = 0\n    for(let arr of allCopy){\n        for(let elem of initPath){\n                if(arr[initPath.indexOf(elem)] !== elem){\n                    delete allPaths[ind]\n                }\n            }\n            ind++\n        }\n        allPaths = allPaths.filter(arr => arr !== undefined)\n        return allPaths\n}\n\n\nconst activateModifyProperties = function(event, params, publish=_gamestate_js__WEBPACK_IMPORTED_MODULE_1__.gameEvents.publish){\n    \n    const shipLoc = params[0].target.id\n    let gameState = params[1]\n    let getBoard = params[3]\n    let gb = getBoard(gameState)\n    const paths = _filterComponentPaths(event)\n    _componentStore(_componentFilter(_ships_js__WEBPACK_IMPORTED_MODULE_2__.components),paths)\n    let finalOptions = Array.from(document.querySelectorAll('.compPropertyTitle'))\n    for(let opt of finalOptions){\n        let par = opt.parentElement\n        let children = Array.from(par.children).filter(child => child.classList.contains('compContainer') || child.classList.contains('compElement'))\n        if(children.length > 0){\n            opt.onclick = function(ev){\n                const path = recordPathHelpers().chartPath(ev,'componentStore','compPropertyTitle').filter(option => option !== opt.id)\n                const changeConfig = ['modify',path,opt.id]\n                publish('playerAction','modify',[gb, shipLoc, changeConfig, gameState]) \n            } \n        }\n         //remember to revise this if playerAction is not the right event name &/or other changes. \n         //Also need to add a cancelAction event in body later.\n    }\n}\n\nconst activateExtendComponent = function(event, params, publish=_gamestate_js__WEBPACK_IMPORTED_MODULE_1__.gameEvents.publish){\n    const shipLoc = params[0].target.id\n    let gameState = params[1]\n    let getBoard = params[3]\n    let gb = getBoard(gameState)\n    const paths = _filterComponentPaths(event)\n    _componentStore(_componentFilter(_ships_js__WEBPACK_IMPORTED_MODULE_2__.components),paths)\n    let finalOptions = Array.from(document.querySelectorAll('.compPropertyTitle'))\n    for(let opt of finalOptions){\n        let par = opt.parentElement\n        let children = Array.from(par.children).filter(child => child.classList.contains('compContainer'))\n        if(children.length > 0){\n            opt.onclick = function(ev){\n                const path = recordPathHelpers().chartPath(ev,'componentStore','compPropertyTitle').filter(option => option !== opt.id)\n                const changeConfig = ['extend component',path,opt.id]\n                publish('playerAction','extend component',[gb,shipLoc, changeConfig,gameState])\n            }\n        }\n        //remember to revise this if playerAction is not the right event name &/or other changes. \n         //Also need to add a cancelAction event in body later.\n    }\n\n}\n\nconst activateActionChoice = function(event,params,publish=_gamestate_js__WEBPACK_IMPORTED_MODULE_1__.gameEvents.publish){\n    const shipLoc = params[0].target.id\n    const gs = params[1]\n    const getCont = params[2]\n    const getB = params[3]\n    publish('playerAction', 'action', [[gs,getCont,getB] , shipLoc, event.target.id])\n    //Note the above was written before the all-encompassing function that parses actions was designed. So review once that is done esp. re: parameter order. \n\n    \n}\n\nconst extendShipPublisher = function(event,params,publish=_gamestate_js__WEBPACK_IMPORTED_MODULE_1__.gameEvents.publish){\n    const removeOldChoiceMarking = function(){\n        const grandparent = event.target.parentElement.parentElement\n        let allChoices = Array.from(document.querySelectorAll('.Mod'))\n        if(allChoices.length === 0){return}\n        for(let choice of allChoices){\n            if(choice.parentElement.parentElement === grandparent){\n                choice.classList.remove('Mod')\n            }\n            else if(grandparent.parentElement.classList.contains('count') && choice.parentElement.parentElement.parentElement.classList.contains('count')){\n                choice.classList.remove('Mod')\n            }\n            return\n        }\n    }\n\n    const shipLoc = params[0].target.id\n    let getBoard = params[3]\n    const path = recordPathHelpers().chartPath(event,'componentStore','compPropertyTitle').filter(option => option !== event.target.id)\n    const changeConfig = ['extend ship',path,event.target.id]\n    publish('extendShip',[getBoard,shipLoc, changeConfig])\n    removeOldChoiceMarking()\n    event.target.classList.add('Mod')\n\n     return\n    //Note: in order for this to work, it is vimp that gb refers to an updated gameboard each time, even if it is not rendered yet.\n    //Otherwise it will keep referring to the same gameboard \n}\n\n\n\n\nconst _generateOptionsObject = function(componentsObj=_ships_js__WEBPACK_IMPORTED_MODULE_2__.components, getLgl=_gameboard_js__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getBoardLegalMoves,publish=_gamestate_js__WEBPACK_IMPORTED_MODULE_1__.gameEvents.publish){\n\n    const _doneButton = function(){\n        const Done = document.createElement('button')\n        Done.classList.add('done')\n        Done.textContent = 'Done'\n        return Done\n    }\n\n    const _availabilityGuard = function(...params){\n        let store = document.querySelector('.componentStore')\n        let main = document.querySelector('.mainConsole')\n        let gs = params[1]\n        \n        let titles = Array.from(document.querySelectorAll('.compPropertyTitle'))\n        for(let elem of titles){\n            if(!elem.classList.contains('unavailable')){\n                return\n            }\n        }\n        store.remove()\n        let deadEnd = document.createElement('div')\n        let noneAvail = document.createElement('span')\n        noneAvail.textContent = 'Ship has all available components. Please return to previous page.'\n        let ret = _doneButton()\n        ret.textContent = 'Return'\n        deadEnd.appendChild(noneAvail)\n        deadEnd.appendChild(ret)\n        ret.onclick = function(){\n            publish('renderGameState',gs)\n            \n        } \n        \n        main.appendChild(deadEnd)\n    }\n    \n    const defaultOpts = {\n        'Build New Ship' : function(...params){\n            let gameState = params[1]\n            let getB = params[3]\n            let gb = getB(gameState)\n            document.querySelector('.mainConsole').appendChild(_shipStore())\n            const ships = Array.from(document.querySelectorAll('.shipOption'))\n            const zones = Array.from(document.querySelectorAll('.zone'))\n            const _prepPlaceShip = function(chosenShip){\n                for (let zone of zones){\n                    if(zone.classList.contains('ship')){\n                        continue\n                    }\n                    zone.classList.add('moveHighlight')\n                    \n                    zone.onclick = function(){\n                        publish('playerAction','build',[gb,standardShipStore[chosenShip](),zone.id,gameState])\n                        \n                    }\n                }\n            }\n            for(let ship of ships){\n                ship.onclick = function(){\n                    _prepPlaceShip(ship.textContent)\n                    \n                }\n            }\n        }\n\n    //remember to revise this if playerAction is not the right event name &/or other changes. \n    //Also need to add a cancelAction event in body later.   \n    }//cancelAction should remove toggleHide.\n\n    const ship = {\n        'Move Ship' : function(...params){\n            let gs = params[1]\n            let getB = params[3]\n            let gb = getB(gs)\n            let shipLoc = params[0].target.id\n            let legals = [...getLgl(gb,shipLoc)] \n            for(let elem of legals){\n                if(document.querySelector(`#${elem}`).classList.contains('ship')){\n                    continue\n                }\n                else{\n                    document.querySelector(`#${elem}`).classList.add('moveHighlight')\n                    document.querySelector(`#${elem}`).onclick = function(){\n                        publish('playerAction','move',[gb, shipLoc, elem,gs])\n                    }\n                    //remember to revise this if playerAction is not the right event name &/or other changes. \n                    //Also need to add a cancelAction event in body later.\n                    //cancelAction should remove toggleHide.\n                }\n            }\n\n\n\n        },\n        'Modify Ship' : function(...params){\n            const propTitles = document.querySelectorAll('.propertyTitle')\n            const props = Array.from(propTitles).map(elem => elem.id).filter(elem => elem !== 'count')\n            let compStore = componentsObj()\n            let compStoreKeys = Object.keys(compStore)\n            let ind = 0\n            for(let prop of props){\n                if(compStoreKeys.includes(prop)){\n                    let propChildren = Array.from(propTitles[ind].parentElement.children).filter(key => key.classList.contains('property'))\n                    if(propChildren.length === 0){\n                        propTitles[ind].classList.add('Mod')\n                        propTitles[ind].onclick = function(e){\n                            activateModifyProperties(e, params)\n                        }\n                    }\n                    else {\n                        compStore = compStore[prop]\n                        compStoreKeys = Object.keys(compStore)\n                    }\n                     \n                }\n                ind++\n               \n            }\n\n        },\n        'Extend Ship' : function(...params){\n            _componentStore()\n            let store = document.querySelector('.componentStore')\n            let Done = _doneButton()\n            let gs = params[1]\n            store.appendChild(Done)\n            Done.onclick = function(){publish('playerAction','extend ship', [gs])} \n            let checkAgainst = Array.from(document.querySelectorAll('.propertyTitle')).map(elem => elem.id)\n            let compPropTitles = Array.from(document.querySelectorAll('.compPropertyTitle'))\n            let toVet = compPropTitles.map(elem => elem.id)\n            for(let elem of toVet){\n                let compPropElem =  compPropTitles[toVet.indexOf(elem)]\n                let par = compPropElem.parentElement\n                let parSibs = Array.from(par.parentElement.children).filter(sib => sib.classList.contains('compPropertyTitle'))\n                let children = Array.from(par.children).filter(child => child.classList.contains('compContainer') || child.classList.contains('compElement'))\n                \n                if(checkAgainst.includes(elem)){\n                    compPropElem.classList.add('unavailable')\n                }\n                else if(children.length > 0 && parSibs.length > 0 && checkAgainst.includes(parSibs[0].id)){\n                    compPropElem.classList.add('unavailable')\n                }\n                else if(children.length > 0){\n                    compPropElem.onclick = function(e){\n                        extendShipPublisher(e, params)\n                        //Remember need to add a cancelAction event in body later.\n                        //cancelAction should remove toggleHide.\n                    }\n                }\n            }\n            \n            _availabilityGuard(...params) //revise when finishing.\n\n        },\n        'Extend Component' : function(...params){\n            let propTitles = []\n            const allContainerParents = Array.from(document.querySelectorAll('.container')).map(cont => cont.parentElement)\n            const propParents = allContainerParents.filter(par => par.classList.contains('property'))\n            const propChildren = propParents.map(parent => Array.from(parent.children))\n            for(let arr of propChildren){\n                arr = arr.filter(child => child.classList.contains('propertyTitle'))\n                propTitles = [...propTitles,...arr]\n            }\n            for(let title of propTitles){\n                title.classList.add('Ext')\n                title.onclick = function(e){\n                    activateExtendComponent(e,params)\n                    //document.querySelector('.toggleHide').classList.remove('toggleHide') review.\n                }\n            }\n                    //cancelAction should remove toggleHide\n         },\n        'Effect Ship Action' : function(...params){\n            let allPropTitles = Array.from(document.querySelectorAll('.propertyTitle')).map(title => title.id)\n            let actions = []\n            let main = document.querySelector('.mainConsole')\n            if(allPropTitles.includes('action')){\n                let allProps = Array.from(document.querySelectorAll('.propertyTitle'))\n                let actPar = allProps[allPropTitles.indexOf('action')].parentElement\n                let actChildren = Array.from(actPar.children)\n                for(let elem of Array.from(actChildren)){\n                    if(elem.classList.contains('container')){\n                        actions = [...Array.from(elem.children).map(elem => elem.textContent)]\n                    }\n                }\n            let choices = document.createElement('div')\n            choices.classList.add('choices')\n            for(let elem of actions){\n                let choice = document.createElement('span')\n                choice.textContent = elem\n                choice.id = elem\n                choice.classList.add('choice')\n                choice.onclick = function(e){\n                    activateActionChoice(e,params)\n                }\n                choices.appendChild(choice)\n            }\n            main.appendChild(choices)\n        }\n\n\n        },//cancelAction should remove toggleHide.\n\n    }\n    const toFilterList = [\n        [document.querySelector('.viewConsole'), function(){\n            return {defaultOpts}\n        }],\n        [Array.from(document.querySelectorAll('.propertyTitle')).filter(tit => tit.id === 'action')[0], function(){\n            delete ship['Effect Ship Action'] \n            delete ship['Extend Component']\n            delete ship['Modify Ship']\n            return {\n                    defaultOpts,\n                    ship\n                }\n            \n        }],\n        [Array.from(document.querySelectorAll('.propertyTitle')).filter(tit => tit.id === 'messagingProtocol')[0],function(){\n            delete ship['Effect Ship Action']\n            return {\n                defaultOpts,\n                ship\n            }\n        }],\n    ]\n \n    const filterOptions = function(){\n        for(let elem of toFilterList){\n            if (!elem[0]){\n                return elem[1]()\n            }\n        }\n        return {\n            defaultOpts,\n            ship\n        }\n    }\n    \n    return filterOptions()\n\n}\n\n\nconst createOptionsConsole = function(...params){\n    let optionsObject = _generateOptionsObject()\n    if(document.querySelector('.optConsole')){\n        document.querySelector('.optConsole').remove()\n    }\n    \n    let main = document.querySelector('.mainConsole')\n    let optCons = document.createElement('div')\n    optCons.classList.add('optConsole')\n    main.appendChild(optCons)\n    let keys = Object.keys(optionsObject)\n    for(let key of keys){\n        let options = Object.keys(optionsObject[key])\n        for (let option of options){\n            let opt = document.createElement('div')\n            opt.classList.add('option')\n            let title = document.createElement('span')\n            title.classList.add('optTitle')\n            title.textContent = option\n            title.onclick = function(){// to revise\n                optionsObject[key][option](...params) \n                title.classList.add('toggleHide')\n            }\n            opt.appendChild(title)\n            optCons.appendChild(opt)\n        }\n    }\n\n}\n\nconst renderAIEffect = function(){\n    return\n}\n\nconst renderPlayerEffect = function(){\n    return\n}\n\nconst _renderShipImage = async function(node,assetName){\n    try {\n        node.classList.contains('ship') ? await (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.renderImage)(node,assetName) : false\n\n    }\n    catch(error){\n        console.log(error)\n    }\n}\n\n\nconst renderState = function(someGameState, someGetCont=_gameboard_js__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getBoardContains, gb=_gameboard_js__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getBoard, publish=_gamestate_js__WEBPACK_IMPORTED_MODULE_1__.gameEvents.publish){\n    let someGb = gb(someGameState)\n    let newBoard = _buildBoard()\n    if(document.querySelector('.gamezone')){\n        document.querySelector('.gamezone').remove()\n    }\n    document.querySelector('main').appendChild(newBoard)\n    createMainConsole()\n    createOptionsConsole(null,someGameState,someGetCont,gb)\n    _skipTurn()\n    for (let elem of Object.keys(someGb)){ \n        if(document.querySelector(`#${elem}`) && someGetCont(someGb,elem)){\n            document.querySelector(`#${elem}`).classList.add('ship')\n            _renderShipImage(document.querySelector(`#${elem}`),'ship.svg')\n            document.querySelector(`#${elem}`).onclick = function(event) {\n            publish('viewShip',event,someGameState,someGetCont,gb);\n            } \n        }\n    }   \n}\n\nconst createDispatchLog = function(){\n    const dispatchElements = (function(){\n        const logContainer = document.createElement('section')\n        const log = document.createElement('div')\n        return {\n            logContainer,\n            log,\n        }\n    })()\n\n    document.querySelector('main').appendChild(dispatchElements.logContainer)\n    dispatchElements.logContainer.appendChild(dispatchElements.log)\n}\n\nconst printLog = function(str,type='regular'){\n    let printMode = {\n        regular : function(){\n            //add  text as a span\n\n        },\n        error : function(){\n            //add text as a span with classList as an error.\n            \n\n        }\n\n    }\n    const solidImplement = function(type){\n        printMode['regular']()\n        document.querySelector(`#${type}ltr`).classList.contains('collected') ? document.querySelector(`#${type}ltr`).classList.add('collected') : false\n    }\n    type.length > 1 ? printMode[type]() : solidImplement(type)\n    return\n\n}\n\nconst printValues = function(counts){\n    if(Array.isArray(counts)){\n        let globalWreckage = document.querySelector('#globalWreckage')\n        let globalPlants = document.querySelector('#globalPlants')\n        let days = document.querySelector('#days')\n        globalWreckage.textContent, globalPlants.textContent, days.textContent = counts\n    }\n    return\n\n}\n\nconst landingPage = function(){\n\n    const initNodes = (function(){\n        const gameContainer = document.createElement('main')\n        const header = document.createElement('header')\n        const headline = document.createElement('h1')\n        const playerNameForm = document.createElement('form')\n        const formContainer = document.createElement('div')\n        const playerLabel = document.createElement('label')\n        const playerInput = document.createElement('input')\n        const playerSubmit = document.createElement('button')\n        return {\n            gameContainer,\n            header,\n            headline,\n            playerNameForm,\n            formContainer,\n            playerLabel,\n            playerInput,\n            playerSubmit\n        }\n    })()\n    \n    const setTextContent = function(){\n        initNodes.headline.textContent = 'SOLIDSHIP' \n        initNodes.playerLabel.textContent = 'What is your name?'\n        initNodes.playerSubmit.textContent = 'Submit'\n    }\n\n    const setAttributes = function(){\n        initNodes.playerLabel.setAttribute('for','playerName')\n        initNodes.playerInput.id = 'playerName'\n        initNodes.playerInput.setAttribute('name','playerName')\n        initNodes.playerInput.setAttribute('required','required')\n        initNodes.playerInput.setAttribute('autocomplete','off')\n        initNodes.playerSubmit.type = 'submit'\n        initNodes.playerNameForm.onsubmit = function(){\n            initNodes.playerNameForm.remove()\n            ;(0,_gamestate_js__WEBPACK_IMPORTED_MODULE_1__.gameLoop)(initNodes.playerInput.value)\n        }\n\n    }\n\n    const appendNodes = function(){\n        document.body.appendChild(initNodes.gameContainer)\n        initNodes.gameContainer.appendChild(initNodes.header)\n        initNodes.gameContainer.appendChild(initNodes.playerNameForm)\n        initNodes.header.appendChild(initNodes.headline)\n        initNodes.playerNameForm.appendChild(initNodes.playerLabel)\n        initNodes.playerNameForm.appendChild(initNodes.formContainer)\n        initNodes.formContainer.appendChild(initNodes.playerInput)\n        initNodes.formContainer.appendChild(initNodes.playerSubmit)\n    }\n\n    setTextContent()\n    setAttributes()\n    appendNodes()\n    return\n}\n\nconst subscribeUIEvents = function(someSubFunc=_gamestate_js__WEBPACK_IMPORTED_MODULE_1__.gameEvents.subscribe){\n    someSubFunc('initGame',createDispatchLog)\n    someSubFunc('renderGameState', renderState)\n    someSubFunc('viewShip', displayShip)\n    someSubFunc('viewShip', createOptionsConsole)\n\n    \n}\n\n//# sourceURL=webpack://solidship/./src/modules/UI.js?");

/***/ }),

/***/ "./src/modules/events.js":
/*!*******************************!*\
  !*** ./src/modules/events.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"events\": () => (/* binding */ events)\n/* harmony export */ });\n\n\nconst events = function(){\n    \n    const _handlersObject = class{\n        constructor(handler, ...args){\n            this.handler = handler\n            this.params = [...args]\n        }\n    }\n\n    const _myEvents = {\n         _events : {}\n    }\n    \n\n    const _checkEvent = function(name){\n\n        const _isEventHere = function(){\n            return Object.prototype.hasOwnProperty.call(_myEvents._events, name)\n        }\n        if (!_isEventHere()){\n           return Object.assign(_myEvents._events, _myEvents._events[name] = []);\n       }\n    }\n\n    const _handlerIndexByOccurrenceOrder = function(someArray, elem, sequenceOccurrence){\n\n        let index = 0\n        let lastInd = index\n            for(let occurrence = 0; occurrence < sequenceOccurrence; occurrence++){                                           \n                 index = someArray.indexOf(elem,lastInd);\n                 lastInd = index + 1\n             }\n         return index\n                 \n    }\n\n\n    const _reduceHandlersObj = function(someArr){\n        const copyArr = [...someArr];\n        const newArr = copyArr.map(elem => elem.handler ? elem.handler : false)\n        return newArr;\n\n        }\n\n    const _removeSpecificHandler = function(name, handlerToRemove, sequenceOccurrence, someArray){\n    \n    const handlersArray = _reduceHandlersObj(someArray)\n    const _specificIndex = _handlerIndexByOccurrenceOrder(handlersArray,handlerToRemove,sequenceOccurrence)\n    someArray = someArray.filter((elem,index) => index !== _specificIndex )\n    \n    \n    return someArray\n\n}\n\n    const removeHandler = function(name, handlerToRemove, sequenceOccurrence=false){\n\n        _checkEvent(name)\n        \n        if(typeof sequenceOccurrence === 'number'){\n            _myEvents._events[name] =  _removeSpecificHandler(name, handlerToRemove, sequenceOccurrence,_myEvents._events[name])\n           \n            return \n        } \n\n        _myEvents._events[name] = _myEvents._events[name].filter(elem => elem.handler !== handlerToRemove)\n\n        return\n\n    };\n\n    const selectivePublish = function(eventName, suppressedHandler,sequenceOccurrence=false, ...params){\n\n        _checkEvent(eventName)\n        \n        let _temporaryArray = [..._myEvents._events[eventName]]\n        let _temporaryPublisher = function(_someArray){\n            _someArray.forEach(function(h){\n                h.handler(...params,...h.params)\n        })}\n\n\n        if(typeof sequenceOccurrence === 'number'){\n           _temporaryArray =  _removeSpecificHandler(eventName,suppressedHandler,sequenceOccurrence,_temporaryArray)\n            return _temporaryPublisher(_temporaryArray)\n        }\n\n        _temporaryArray = _temporaryArray.filter(elem => elem.handler !== suppressedHandler);\n        _temporaryPublisher(_temporaryArray)\n        return\n    }\n\n    \n    const subscribe = function(name, newHandler, ...optionalArgs){\n\n        _checkEvent(name) \n\n        _myEvents._events[name] = [..._myEvents._events[name], new _handlersObject(newHandler, ...optionalArgs)] \n        return \n        \n    };\n\n    const publish = function(name, ...params){ \n       \n        _checkEvent(name)\n\n        _myEvents._events[name].forEach(function(h){\n                h.handler(...params,...h.params)\n        })\n        return\n        \n    };\n\n            \n    return {\n        publish,\n        subscribe,\n        removeHandler,\n        selectivePublish\n    }    \n}\n\n\n//# sourceURL=webpack://solidship/./src/modules/events.js?");

/***/ }),

/***/ "./src/modules/gameboard.js":
/*!**********************************!*\
  !*** ./src/modules/gameboard.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gameBoard\": () => (/* binding */ gameBoard),\n/* harmony export */   \"defaultConfig\": () => (/* binding */ defaultConfig),\n/* harmony export */   \"createContainsObject\": () => (/* binding */ createContainsObject),\n/* harmony export */   \"updateBoardContents\": () => (/* binding */ updateBoardContents)\n/* harmony export */ });\n\nconst gameBoard = class {\n    board = {\n        A1 : {\n            legalMoves:['B1','A2','B2'], \n            contains: null\n        },\n        B1 : {\n            legalMoves:['A1','C1','A2','B2','C2'],\n            contains: null\n        },\n        C1 : {\n            legalMoves:['B1','D1','B2','C2','D2'],\n            contains: null\n        },\n        D1 : {\n            legalMoves:['C1','E1','C2','D2','E2'],\n            contains: null                \n        }, \n        E1 : {\n            legalMoves:['D1','F1','D2','E2','F2'],\n            contains: null\n        },\n        F1 : {\n            legalMoves:['E1','E2','F2'],\n            contains: null\n        },\n        A2 : {\n            legalMoves:['A1','B1','B2','A3','B3'],\n            contains: null\n        },\n        B2 : {\n            legalMoves:['A1','B1','C1','A2','C2','A3','B3','C3'],\n            contains: null\n        }, \n        C2 : {\n            legalMoves:['B1','C1','D1','B2','D2','B3','C3','D3'],\n            contains: null\n        }, \n        D2 : {\n            legalMoves:['C1','D1','E1','C2','E2','C3','D3','E3'],\n            contains: null\n        }, \n        E2 : {\n            legalMoves:['D1','E1','F1','D2','F2','D3','E3','F3'],\n            contains: null\n        },\n        F2 : {\n            legalMoves:['E1','F1','E2','E3','F3'],\n            contains: null\n        },\n        A3 : {\n            legalMoves:['A2','B2','B3','A4','B4'],\n            contains: null\n        },\n        B3 : {\n            legalMoves:['A2','B2','C2','A3','C3','A4','B4','C4'],\n            contains: null\n        },\n        C3 : {\n            legalMoves:['B2','C2','D2','B3','D3','B4','C4','D4'],\n            contains: null\n        },\n        D3 : {\n            legalMoves:['C2','D2','E2','C3','E3','C4','D4','E4'],\n            contains: null\n        },\n        E3 : {\n            legalMoves:['D2','E2','F2','D3','F3','D4','E4','F4'],\n            contains: null\n        },\n        F3 : {\n            legalMoves:['E2','F2','E3','E4','F4'],\n            contains: null\n        },\n        A4 : {\n            legalMoves:['A3','B3','B4','A5','B5'],\n            contains: null\n        },\n        B4 : {\n            legalMoves:['A3','B3','C3','A4','C4','A5','B5','C5'],\n            contains: null\n        },\n        C4 : {\n            legalMoves:['B3','C3', 'D3','B4','D4','B5','C5','D5'],\n            contains: null\n        },\n        D4 : {\n            legalMoves:['C3','D3', 'E3','C4','E4','C5','D5','E5'],\n            contains: null\n        },\n        E4 : {\n            legalMoves:['D3','E3', 'F3','D4','F4','D5','E5','F5'],\n            contains: null\n        },\n        F4 : {\n            legalMoves:['E3','F3', 'E4','E5','F5'],\n            contains: null\n        },\n        A5 : {\n            legalMoves:['A4','B4','B5','A6','B6'],\n            contains: null\n        },\n        B5 : {\n            legalMoves:['A4','B4','C4','A5','C5','A6','B6','C6'],\n            contains: null\n        },\n        C5 : {\n            legalMoves:['B4','C4','D4','B5','D5','B6','C6','D6'],\n            contains: null\n        },\n        D5 : {\n            legalMoves:['C4','D4','E4','C5','E5','C6','D6','E6'],\n            contains: null\n        },\n        E5 : {\n            legalMoves:['D4','E4','F4','D5','F5','D6','E6','F6'],\n            contains: null\n        },\n        F5 : {\n            legalMoves:['E4','F4', 'E5','E6','F6'],\n            contains: null\n        },\n        A6 : {\n            legalMoves:['A5','B5','B6'],\n            contains: null\n        },\n        B6 : {\n            legalMoves:['A5','B5','C5','A6','C6'],\n            contains: null\n        }, \n        C6 : {\n            legalMoves:['B5','C5','D5','B6','D6'],\n            contains: null\n        }, \n        D6 : {\n            legalMoves:['C5','D5','E5','C6','E6'],\n            contains: null\n        },\n        E6 : {\n            legalMoves:['D5','E5','F5','D6','F6'],\n            contains: null\n        },\n        F6 : {\n            legalMoves:['E5','F5','E6'],\n            contains: null\n        }\n    }\n    plants = 0;\n    wreckage = 0;\n        \n\n    constructor(state='new game'){\n        this.state = state\n    }\n}\n\n\nconst defaultConfig = {\n    getBoardContains: function(currentGameBoard,key){\n        return currentGameBoard[key].contains\n        \n    }, \n    setBoardContains: function(currentGameBoard,key,value){\n        currentGameBoard[key].contains = value\n    \n        return currentGameBoard\n    },\n    getBoardLegalMoves: function(currentGameBoard,key){\n        return currentGameBoard[key].legalMoves\n    \n    },\n    getBoard : function(currentGameBoard){\n        return currentGameBoard.board\n\n    },\n    getState : function(currentGameBoard){\n        return currentGameBoard.state\n\n    },\n    newBoard : function(state){\n        return new gameBoard(state) \n    },\n    getWreckCount : function(currentGameBoard){\n        return currentGameBoard.wreckage\n\n    },\n    getPlantCount : function(currentGameBoard){\n        return currentGameBoard.plants\n    },\n    setWreckCount : function(currentGameBoard, value){\n        currentGameBoard.wreckage = value\n\n        return currentGameBoard\n    },\n    setPlantCount : function(currentGameBoard,value){\n        currentGameBoard.plants = value \n\n        return currentGameBoard\n    }\n\n\n}\n\n \nconst createContainsObject = function(board, updatedKey, updatedValue, getContents=defaultConfig.getBoardContains){\n    let newContainsObject = {};\n    for (let key of Object.keys(board)){\n        if(key === updatedKey){\n            Object.assign(newContainsObject, {[key]: updatedValue})\n        }\n        else{\n        Object.assign(newContainsObject, {[key]:getContents(board,key)})\n        }\n    }\n    return newContainsObject\n}\n\n\n\nconst updateBoardContents = function(currentBoard, containsObject,setContents= defaultConfig.setBoardContains){\n    for (let key of Object.keys(containsObject)){\n        if(Object.is(containsObject[key], null)){\n            setContents(currentBoard,key,null)\n        }\n        else{\n            let value = Object.assign(Object.create(Object.getPrototypeOf(containsObject[key])), containsObject[key])\n            setContents(currentBoard,key,value) \n        }\n        \n    }\n    return currentBoard\n}\n\n\n\n//# sourceURL=webpack://solidship/./src/modules/gameboard.js?");

/***/ }),

/***/ "./src/modules/gamestate.js":
/*!**********************************!*\
  !*** ./src/modules/gamestate.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"gameEvents\": () => (/* binding */ gameEvents),\n/* harmony export */   \"updateState\": () => (/* binding */ updateState),\n/* harmony export */   \"isGameOver\": () => (/* binding */ isGameOver),\n/* harmony export */   \"firstHappeningSensor\": () => (/* binding */ firstHappeningSensor),\n/* harmony export */   \"gameTime\": () => (/* binding */ gameTime),\n/* harmony export */   \"logCounts\": () => (/* binding */ logCounts),\n/* harmony export */   \"thresholdSensor\": () => (/* binding */ thresholdSensor),\n/* harmony export */   \"subscribeAllEvents\": () => (/* binding */ subscribeAllEvents),\n/* harmony export */   \"gameLoop\": () => (/* binding */ gameLoop)\n/* harmony export */ });\n/* harmony import */ var _events_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events.js */ \"./src/modules/events.js\");\n/* harmony import */ var _gameboard_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gameboard.js */ \"./src/modules/gameboard.js\");\n/* harmony import */ var _ships_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ships.js */ \"./src/modules/ships.js\");\n/* harmony import */ var _player_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./player.js */ \"./src/modules/player.js\");\n/* harmony import */ var _AI_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./AI.js */ \"./src/modules/AI.js\");\n/* harmony import */ var _UI_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./UI.js */ \"./src/modules/UI.js\");\n\n\n\n\n\n\n\n\nconst gameEvents = (0,_events_js__WEBPACK_IMPORTED_MODULE_0__.events)()\nconst newGs = (function(){\n    let gs = new _gameboard_js__WEBPACK_IMPORTED_MODULE_1__.gameBoard('new game');\n    let board = _gameboard_js__WEBPACK_IMPORTED_MODULE_1__.defaultConfig.getBoard(gs)\n    _gameboard_js__WEBPACK_IMPORTED_MODULE_1__.defaultConfig.setBoardContains(board,'B3',(0,_ships_js__WEBPACK_IMPORTED_MODULE_2__.legacyShip)())\n    _gameboard_js__WEBPACK_IMPORTED_MODULE_1__.defaultConfig.setBoardContains(board,'D3',(0,_ships_js__WEBPACK_IMPORTED_MODULE_2__.legacyShip)())\n    return gs\n\n})()\n\nconst updateState = function(receiver,newState){\n    receiver = Object.assign({},receiver)\n    receiver.gameState = Object.assign({}, newState)\n    return receiver\n}\n\nconst isGameOver = function(gs, getW=_gameboard_js__WEBPACK_IMPORTED_MODULE_1__.defaultConfig.getWreckCount, getP=_gameboard_js__WEBPACK_IMPORTED_MODULE_1__.defaultConfig.getPlantCount, publish=gameEvents.publish, getB=_gameboard_js__WEBPACK_IMPORTED_MODULE_1__.defaultConfig.getBoard, getCont = _gameboard_js__WEBPACK_IMPORTED_MODULE_1__.defaultConfig.getBoardContains){\n    if(typeof gs !== 'object'){\n        return\n    }\n    const currentWreckage = getW(gs)\n    const currentPlants = getP(gs)\n    const board = getB(gs)\n    let shipCount = 0\n    for(let zone of Object.keys(board)){\n        if(getCont(board,zone) !== null){\n            shipCount++\n        }\n    }\n    if(shipCount === 36 && currentPlants >= 200 && currentWreckage <= 5){\n        publish('renderGameState', new _gameboard_js__WEBPACK_IMPORTED_MODULE_1__.gameBoard('Player Won'))\n        return\n    }\n    else if(shipCount === 0 || currentWreckage >= 200 ){\n        publish('renderGameState',new _gameboard_js__WEBPACK_IMPORTED_MODULE_1__.gameBoard('Player Lost'))\n        return\n    }\n    return\n    \n}\n\nconst _eventsToRespondTo = {\n    'test' : () => 'test',\n\n    'new game' :  () => \n        'Dispatch : Hello there. We are the Dispatch '+\n         'crew. Our remit is to explain what is going '+\n         'on by providing status updates.'+\n         '\\n\\nLet us begin by reminding you what the mission'+\n         'is and what tasks we need to complete to'+\n         'fulfil it. '+\n         '\\n\\nAs you know these are international waters, and '+\n         'we are looking to cultivate seagrass on this seabed. '+\n         'You see, seagrass accounts for 10% of the ocean\\'s '+ //link this part\n         'capacity to store carbon. This aligns perfectly with '+\n         'our goal to fight climate change.'+\n         '\\n\\nIt is also important for marine conservation and '+\n         'biodiversity, and this location has recently been added '+\n         'to the growing index of our Restoration Plan. With this, '+\n         'we shall be making an impact on a global level.'+\n         '\\n\\nWe are making good progress, but you see...There\\'s a problem'+\n         '\\n\\nBig Oil has an interest in this territory because they believe '+\n         'that there is petroleum underneath the sea floor.'+ \n         '\\n\\nNaturally, they are determined to mine the area to the point of '+\n         'an ecological disaster. We have lawyers doing their best to settle '+\n         'the matter legally, but it is taking a long time. In the mean time '+\n         'a naval paramilitary group has been firing at our vessels. Big Oil '+\n         'is doing everything to bully us off the area.'+\n         '\\n\\nThat is where you come in. With you on our side, we can turn the'+\n         'tide against them. We have provided you with two ships to start with '+\n         'They are legacy warships, but we are a peaceful organisation and that '+\n         'means that we cannot engage violently, therefore these have been stripped '+\n         'of their attacking capacity. Their value is that they have a relatively high '+\n         'breakpoint so they can endure more damage than a standard ship. '+\n         '\\n\\nTo win this we need to achieve 3 objectives:'+\n         '\\n\\n1. Numbers. We fill the whole area with our ships.'+\n         '\\n\\n2. Protect the sea. We need to keep wreckage down to a minimum of X units.'+ //replace X\n         '\\n\\n3. Continue the restoration effort. We need to have a minimum of Y units of seagrass'+//replace Y\n         '\\n\\n We do this, and victory is ours, but if the enemy sinks all our ships, or the'+\n         'wreckage rises above Z units then Big Oil will have won.'+//replace Z\n         '\\n\\nThe odds are stacked against us, so we need to minimise time spent building and maintaining ships. '+\n         'Remember, each day is precious so we must not waste them. To help you with designing the ships, we have '+\n         'hired two consultants who will assist you during this campaign. Meet Tim and Audrey:'+\n         '\\n\\nTim: Hello there! I\\'m Tim.'+\n         '\\n\\nAudrey: and this is Audrey. Pleasure to meet you.'+\n         '\\n\\nDispatch: These two come from different backgrounds, take their advice with a grain of salt they will '+\n         'sometimes disagree, and that is when you have to make a choice, but when they do agree then it is generally '+\n         'a good idea to go along with it. You can also choose to discard their opinions completely if you wish.'+\n         '\\n\\nWe shall leave you to it for now, but have a click around the consoles and we\\'ll give you guidance on what you\\re '+\n         'working with, depending on what you click.',\n    \n    'missile missed ship' : () => \n        'Dispatch : It looks like the enemy has missed our ship. When that happens you will be getting a \"missile missed ship\" '+\n        'status from us here in the log. \\n\\nThis is the best case scenario for us when the enemy attacks, but it does not come '+\n        'a cost. Observe that the wreckage count has gone up. Therefore even when the enemy is off the mark, we still pay a '+\n        'price since our mission is the protection of the seabed. Our fleet is just the means to achieve that objective.'+\n        '\\n\\nNot to worry. I am sure that our clearing ships are up to the task. Right?',\n\n    'missile hit ship' : () => \n        'Dispatch : It looks like the enemy has hit one of our ships. When that happens you will be getting a \"missile hit ship\" '+\n        'status from us here in the log. \\n\\nThis is not good. You should view the ship by observing the enemy\\'s last target in the '+\n        'bar above the battle grid and clicking on that location. There you can compare the ship\\'s \"Damage\" with its \"Breakpoint\".'+ //review location of 'last target'\n        '\\n\\nRemember if the damage matches or exceeds the breakpoint then that ship will sink, so be careful.'+\n        '\\n\\nTim: What we ought to do here is move the ship. The enemy likes to hit the same target after getting a hit.'+\n        '\\n\\nAudrey: True, but this is not always the case. The data suggests that they tend to send missiles in the same area'+\n        'at times too.'+\n        '\\n\\nTim: They only do this occasionally though. Most of the times they target the same location.'+\n        '\\n\\nAudrey: Yes. That is the full view. Anyway, the point is moving a ship can work most of the time, but it is no guarantee. '+\n        'The only way to guarantee safety is to have the ship come under the protection of defense ship. \\n\\nTo do this, the ship must be'+\n        'only one zone away from the defense ship and the defense ship must \"Effect Action\" right before the enemy targets its missile at'+\n        'said ship.'+\n        '\\n\\nTim: Sound complicated. Better to just move the ship.'+\n        '\\n\\nAudrey: It really is not that complicated. You want to protect a ship that just been hit. The enemy will likely hit the same'+\n        'target, so if there is a defense ship one move away, you click on that and \"Effect Action\".'+\n        '\\n\\nTim: I would just move honestly.'+\n        '\\n\\nAudrey: Whatever.'+\n        '\\n\\nDispatch: We hasten to add that when a ship is hit the wreckage count goes up by X. So do keep that factor in mind as well.',//replace X with the actual value.\n    \n    'missile sunk ship' : () => \n        'Dispatch : It looks like the enemy has sunk one of our ship. When that happens you will be getting a \"missile sunk ship\" '+\n        'status from us here in the log.\\n\\nNote that the wreckage has gone up by M amount. This is the highest that it can go, '+ //replace M with the actual value.\n        'so I urge you to be mindful of this fact because if this keeps happening the pile-up in debris will be difficult to manage'+\n        '\\n\\nTim: Are we losing this?\\n\\nAudrey: Don\\'t panic. Plenty of ships are going to sink before this is over. We are lucky'+\n        'that these ships are automated so there is no loss of human life involved.\\n\\nTim: I hope that wasn\\'t a clearing ship that '+\n        'just went under\\n\\nAudrey: Or a planting ship...\\n\\nDispatch: Just for your information, Tim and Audrey are saying this because '+\n        'if a clearing ship is sunk then all the debris it collected is added back to the wreckage count. Therefore clearing ships with '+\n        'high wreckage amounts could be a single point of failure, so it is better to distribute clearing where possible.\\n\\nThe same goes '+\n        'for planting ships: all plants falling under a sunk ship\\'s responsibility are removed with it.'\n    \n          \n    \n}\n\nlet _alreadyHappened = []\n\nconst firstHappeningSensor = function(str, publish=gameEvents.publish){ \n    if(_alreadyHappened.includes(str)){\n        return _alreadyHappened\n    }\n    else if(Object.keys(_eventsToRespondTo).includes(str)){\n        _alreadyHappened = [..._alreadyHappened,str]\n        publish('renderLog', _eventsToRespondTo[str]())\n        return _alreadyHappened\n    }\n    return _alreadyHappened\n}\n\nlet gameTime = {days : 0}\n\nconst logCounts = function(gs,getW=_gameboard_js__WEBPACK_IMPORTED_MODULE_1__.defaultConfig.getWreckCount,getP=_gameboard_js__WEBPACK_IMPORTED_MODULE_1__.defaultConfig.getPlantCount,publish=gameEvents.publish){\n    if(typeof gs !== 'object'){\n        return\n    }\n    const currentCounts =  [getW(gs), getP(gs),++gameTime.days]\n    publish('renderLog',currentCounts)\n\n}\n\nconst _thresholds = ( () => {\n    const _wreckageThresholds = new Map()\n    const _plantThresholds = new Map()\n    const _daysThresholds = new Map()\n\n    _wreckageThresholds.set(1,'first wreckage')\n    _plantThresholds.set(1,'first plant')\n    _daysThresholds.set(1,'first day') \n\n\n    return [\n        _wreckageThresholds,\n        _plantThresholds,\n        _daysThresholds\n    ]\n\n})()\n\nconst thresholdSensor = function(gs,getW=_gameboard_js__WEBPACK_IMPORTED_MODULE_1__.defaultConfig.getWreckCount,getP=_gameboard_js__WEBPACK_IMPORTED_MODULE_1__.defaultConfig.getPlantCount,publish=gameEvents.publish){\n    if(typeof gs !== 'object'){\n        return\n    }\n    const currentCounts =  [getW(gs), getP(gs),gameTime.days]\n    for(let ind = 0; ind < currentCounts.length; ind++){\n        let val = currentCounts[ind]\n        let thresholdOrder = _thresholds[ind].keys()\n        let valueToCheck = thresholdOrder.next().value\n        if(valueToCheck <= val){\n            publish('senseEvent',_thresholds[ind].get(valueToCheck))\n            _thresholds[ind].delete(valueToCheck)\n        }       \n    }\n    return\n}\n\n\nconst subscribeAllEvents = function(){\n    gameEvents.subscribe('senseEvent', isGameOver)\n    gameEvents.subscribe('senseEvent', firstHappeningSensor)\n    gameEvents.subscribe('senseEvent', logCounts)\n    gameEvents.subscribe('senseEvent', thresholdSensor)\n    ;(0,_player_js__WEBPACK_IMPORTED_MODULE_3__.subscribePlayerEvts)(gameEvents.subscribe)\n    ;(0,_AI_js__WEBPACK_IMPORTED_MODULE_4__.subscribeAIEvts)(gameEvents.subscribe)\n    ;(0,_UI_js__WEBPACK_IMPORTED_MODULE_5__.subscribeUIEvents)(gameEvents.subscribe)\n}\n\nconst gameLoop = function(playerName){ //this should be some input value from the intial screen. \n    subscribeAllEvents()\n    gameEvents.publish('initGame', playerName) //Note: re this line , hop over to the UI.js and subscribe renderState to initGame\n    //now you need to make a new initial gameState, update that state for player and ai and then ->\n    //publish(renderGameState, newgs)\n    gameEvents.publish('updateGameState',updateState,newGs)\n    gameEvents.publish('renderGameState',newGs )                                                \n    \n}\n\n\n\n\n\n\n//# sourceURL=webpack://solidship/./src/modules/gamestate.js?");

/***/ }),

/***/ "./src/modules/player.js":
/*!*******************************!*\
  !*** ./src/modules/player.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"playerObj\": () => (/* binding */ playerObj),\n/* harmony export */   \"moveShip\": () => (/* binding */ moveShip),\n/* harmony export */   \"placeShip\": () => (/* binding */ placeShip),\n/* harmony export */   \"blockMissileAction\": () => (/* binding */ blockMissileAction),\n/* harmony export */   \"upgradeShip\": () => (/* binding */ upgradeShip),\n/* harmony export */   \"effectFarm\": () => (/* binding */ effectFarm),\n/* harmony export */   \"effectClear\": () => (/* binding */ effectClear),\n/* harmony export */   \"updatePlayerWrapper\": () => (/* binding */ updatePlayerWrapper),\n/* harmony export */   \"effectPlayerAction\": () => (/* binding */ effectPlayerAction),\n/* harmony export */   \"subscribePlayerEvts\": () => (/* binding */ subscribePlayerEvts)\n/* harmony export */ });\n/* harmony import */ var _gameboard__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gameboard */ \"./src/modules/gameboard.js\");\n/* harmony import */ var _gamestate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./gamestate */ \"./src/modules/gamestate.js\");\n/* harmony import */ var _ships__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./ships */ \"./src/modules/ships.js\");\n\n\n\n\nconst [getBrdCont, setBrdCont, newBrd, getBrd] = [_gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getBoardContains, _gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.setBoardContains, _gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.newBoard, _gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getBoard]\nconst [legal,getP,setP,getW,setW] = [_gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getBoardLegalMoves, _gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getPlantCount, _gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.setPlantCount, _gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getWreckCount, _gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.setWreckCount]\nconst [getSc, setSc, getEt,setNs] = [_ships__WEBPACK_IMPORTED_MODULE_2__.getShipCount,_ships__WEBPACK_IMPORTED_MODULE_2__.setShipCount, _ships__WEBPACK_IMPORTED_MODULE_2__.getEquipmentType,_ships__WEBPACK_IMPORTED_MODULE_2__.setNewShip]\n\nconst playerObj =  class {\n    constructor(name,gameState=new _gameboard__WEBPACK_IMPORTED_MODULE_0__.gameBoard('new game')){\n        this.name = name,\n        this.gameState = gameState\n    }\n}\n\n\nconst _checkShipObject = function(ship){\n    if (Object.is(ship,null)){\n        return {error: 'Ship has missing properties'}\n        }\n    \n    const properties = ['isSunk', 'damage', 'breakpoint','mode']\n    for (let property of properties){\n        if(property in ship === false){\n            return {error: 'Ship has missing properties'}\n        }\n    }\n    return ship\n}\n3\n\nconst _checkTargetLoc = function(board,ship,key,getBoardContents = _gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getBoardContains){\n    \n    if(getBoardContents(board,key) === null){\n        let updateValue = Object.assign(Object.create(Object.getPrototypeOf(ship)),ship)\n        return updateValue\n    }\n    return {error : 'This zone is occupied'}\n}\n\n\nconst _removeShip = function(currentBoard, newGameBoard=new _gameboard__WEBPACK_IMPORTED_MODULE_0__.gameBoard().board, sourceKey, getShip=getBrdCont, setCont=setBrdCont){\n    if(Object.is(null,_checkShipObject(getShip(currentBoard,sourceKey)))){\n        return currentBoard\n    }\n    let containsObject = (0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.createContainsObject)(currentBoard,sourceKey,null, getShip);\n    newGameBoard = (0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.updateBoardContents)(newGameBoard,containsObject, setCont)\n\n    return newGameBoard\n\n}\n\nconst _checkMoveLegality = function(currentBoard, sourceKey,targetKey, getSourceLegalMoves=_gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getBoardLegalMoves){\n     const legalMoves = [...getSourceLegalMoves(currentBoard, sourceKey)]\n\n     if(legalMoves.includes(targetKey) === false){\n         return false\n     }\n\n     return true\n}\n\n\nconst moveShip = function(currentBoard, sourceKey, targetKey, getShip=getBrdCont, ngb=newBrd, gb=getBrd){\n    \n    if(Object.prototype.hasOwnProperty.call(currentBoard, 'error')){\n        return currentBoard\n    }\n    if(_checkMoveLegality(currentBoard,sourceKey, targetKey) === false){\n        return {\n            error: 'This move is illegal'\n        }\n    }\n    \n    let ship = getShip(currentBoard, sourceKey) \n     let newGameBoard = gb(placeShip(currentBoard,ship,targetKey))\n\n    if(Object.prototype.hasOwnProperty.call(newGameBoard, 'error')){\n        return newGameBoard\n    }\n    \n    let finalBoard = ngb('ship move action')\n    let nullBoard = ngb('remove ship')\n    Object.assign(gb(finalBoard),  _removeShip(newGameBoard,gb(nullBoard),sourceKey)) \n    return finalBoard\n     \n}\n\nconst placeShip = function(currentBoard, ship, targetKey, getCont=getBrdCont, ngb=newBrd, gb=getBrd, setCont=setBrdCont){\n    ship = _checkShipObject(ship)\n    if(Object.prototype.hasOwnProperty.call(ship, 'error')){\n        return ship\n    }\n    let updateValue = _checkTargetLoc(currentBoard,ship,targetKey)\n    if(Object.prototype.hasOwnProperty.call(updateValue, 'error')){\n        return updateValue\n    }\n    \n    let containsObject = (0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.createContainsObject)(currentBoard, targetKey, updateValue, getCont)\n    let newGameBoard = ngb('ship place action');\n    let board = gb(newGameBoard)\n    Object.assign(board, (0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.updateBoardContents)(board, containsObject, setCont)) \n    \n    return newGameBoard \n\n}\n\nconst blockMissileAction = function(currentBoard, shipLocation, getCont=getBrdCont, ngb=newBrd, gb=getBrd, setCont=setBrdCont, lgl=legal){\n    let newGameBoard = ngb('missile block action');\n    let board = gb(newGameBoard);\n    let blocked = {missileBlocked : [shipLocation, ...lgl(board,shipLocation)]}\n    let cont = (0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.createContainsObject)(currentBoard,null,null,getCont)\n    if(currentBoard.missileBlocked){\n        blocked.missileBlocked = [...currentBoard.missileBlocked,...blocked.missileBlocked]\n        blocked.missileBlocked = [...new Set(blocked.missileBlocked)]\n        delete cont.missileBlocked\n    }\n    (0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.updateBoardContents)(board,cont, setCont)\n    Object.assign(board,blocked)\n    return newGameBoard\n}\n\n\n\nconst _unwrapChanges = function(actualShip, mode, keys, change, changedShip=_ships__WEBPACK_IMPORTED_MODULE_2__.getChangedShip){\n    let newShip = Object.create(Object.getPrototypeOf(actualShip))\n    Object.assign(newShip,actualShip)\n    let newerShip = changedShip(newShip, keys, change)\n\n    if(mode === 'extend component'){\n        let targetKey = keys[keys.length - 1]\n        let finalTarget = newShip;\n        for(let elem of keys){\n            if(targetKey === elem){\n                finalTarget[targetKey].push(newerShip[targetKey][0])\n            }\n            finalTarget = finalTarget[elem]\n            newerShip = newerShip[elem]\n        }\n        return newShip\n    }\n    return newerShip\n    \n}\n\nconst upgradeShip =  function(currentBoard, shipLocation, changeConfig, currState, getCont=getBrdCont, ngb=newBrd, gb=getBrd, setCont=setBrdCont,getWr=getW,getPl=getP){\n    const shipToChange = getCont(currentBoard,shipLocation)\n    const changedShip = _unwrapChanges(shipToChange, ...changeConfig)\n    if(changedShip.error){\n        return changedShip\n    }\n    let newGameBoard = ngb('upgrade ship action')\n    Object.assign(newGameBoard, {wreckage : getWr(currState)}, {plants : getPl(currState)})\n    let cont = (0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.createContainsObject)(currentBoard,shipLocation,changedShip, getCont)\n    ;(0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.updateBoardContents)(gb(newGameBoard),cont,setCont)\n    return newGameBoard\n\n\n}\n\nconst _countIncrementByType = {\n    'classic (damaged)' : 0,\n    'classic' : 1,\n    'modern' : 2,\n}\n\nconst _determineIncrement = function(type){\n    if(type.length > 1){\n        for(let count = 0; count < type.length; count++){\n            if(!Object.prototype.hasOwnProperty.call(_countIncrementByType,type[count])){\n                continue\n            }\n            if(_countIncrementByType[type[count]] > 0){\n                return type[count]\n            }\n        }\n            \n    }\n    return type[0]\n    \n}\n\n\nconst effectFarm = function(currentBoard, shipLoc, currentGameState, getCont=getBrdCont, ngb=newBrd, gb=getBrd, setCont=setBrdCont,gp=getP,sp=setP, gw=getW, gc=getSc, sc=setSc, gte=getEt, newS=setNs){\n    \n    let newGameBoard = ngb()\n    const ship = getCont(currentBoard,shipLoc)\n    let type = gte(ship)\n    let inc = _determineIncrement(type)\n    \n\n    const _incrementShip = function(){\n        let currentShipCount = gc(ship)\n        let newShipCount = currentShipCount.plants + _countIncrementByType[inc]\n        let newShip = newS(ship,['properties','equipment','count'])    \n        newShip = sc(newShip,{plants : newShipCount})        \n        return newShip\n    }\n\n    const _incrementState = function(){\n        const plantCount = gp(currentGameState)\n        const newPlantCount = plantCount + _countIncrementByType[inc]\n        Object.assign(newGameBoard, {wreckage : gw(currentGameState)} ,{state : 'effect farm action'}) \n        newGameBoard = sp(newGameBoard,newPlantCount)\n        return newGameBoard\n\n    }\n    newGameBoard = _incrementState()\n    \n    let cont = (0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.createContainsObject)(currentBoard,shipLoc, _incrementShip(),getCont)\n\n    ;(0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.updateBoardContents)(gb(newGameBoard),cont,setCont)\n    \n    return newGameBoard\n\n}\n\nconst effectClear = function(currentBoard, shipLoc, currentGameState, getCont=getBrdCont, ngb=newBrd, gb=getBrd, setCont=setBrdCont,gw=getW, sw=setW, gp=getP, gc=getSc, sc=setSc, gte=getEt, newS=setNs){\n    let newGameBoard = ngb()\n    const ship = getCont(currentBoard, shipLoc)\n    let type = gte(ship)\n    let inc = _determineIncrement(type)\n    const wreckCount = gw(currentGameState)\n    const provisoryWreckCount =  wreckCount - _countIncrementByType[inc]\n\n    const _incrementShip = function(){\n        let currentShipCount = gc(ship)\n        let actualWreckCount = provisoryWreckCount <= 0 ? wreckCount : _countIncrementByType[inc]\n        let newShipCount = currentShipCount.wreckage + actualWreckCount\n        let newShip = newS(ship,['properties','equipment','count'])\n        newShip = sc(newShip, {wreckage : newShipCount})\n        return newShip\n    }\n\n    const _decrementState = function(){\n        const newWreckCount = provisoryWreckCount <= 0 ? 0 : provisoryWreckCount\n        Object.assign(newGameBoard, {plants : gp(currentGameState)}, {state : 'effect clear action'})\n        newGameBoard = sw(newGameBoard, newWreckCount)\n        return newGameBoard \n    }\n\n    newGameBoard = _decrementState()\n    let cont = (0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.createContainsObject)(currentBoard, shipLoc, _incrementShip(),getCont)\n    ;(0,_gameboard__WEBPACK_IMPORTED_MODULE_0__.updateBoardContents)(gb(newGameBoard),cont,setCont)\n    return newGameBoard\n}\n\n\nlet player1 = {sessionPlayer : null}\n\nconst updatePlayerWrapper = function(someFunc, ...params){\n    player1.sessionPlayer = someFunc(player1.sessionPlayer,...params)\n    console.log(player1.sessionPlayer.gameState)\n    return player1\n}\n\nconst effectPlayerAction = function(instruction, params, pub=_gamestate__WEBPACK_IMPORTED_MODULE_1__.gameEvents.publish, ups=_gamestate__WEBPACK_IMPORTED_MODULE_1__.updateState, checkMess=_ships__WEBPACK_IMPORTED_MODULE_2__.checkMessagingProtocol,checkEq=_ships__WEBPACK_IMPORTED_MODULE_2__.checkEquipment,getWr=getW,getPl=getP, lgl=legal,getA=_ships__WEBPACK_IMPORTED_MODULE_2__.getAction, getMess=_ships__WEBPACK_IMPORTED_MODULE_2__.getMessagingProtocol){\n    \n\n    const _effectAction = {\n        action : function(paramArray){\n            const [tools,loc,actionChoice] = paramArray\n            const filterAction = function(){\n                let [currState,getContains,getBoard] = tools\n                let board = getBoard(currState)\n                let ship = getContains(board,loc)\n                \n                if(Object.prototype.hasOwnProperty.call(checkMess(ship),'error')){\n                    pub('renderLog',checkMess(ship).error,'error')\n                    pub('triggerAI')\n                    return\n                }\n                if(Object.prototype.hasOwnProperty.call(checkEq(ship,actionChoice),'error')){\n                    pub('renderLog',checkEq(ship, actionChoice).error,'error')\n                    pub('triggerAI')\n                    return\n                }               \n\n                const actObj = {\n                    'seagrass planting' : function(msg=false,location=loc,brd=board,gs=currState){\n                        let newGs1 = effectFarm(brd,location,gs)\n                        if(Object.prototype.hasOwnProperty.call(newGs1,'error')){\n                            pub('renderLog',newGs1.error,'error')\n                            pub('triggerAI')\n                            return\n                        }\n                        pub('updateGameState',ups,newGs1)\n                        msg === false ? pub('triggerAI') : false\n\n                    },\n                    'clear debris' : function(msg=false,location=loc,brd=board,gs=currState){\n                        let newGs2 = effectClear(brd,location,gs)\n                        if(Object.prototype.hasOwnProperty.call(newGs2,'error')){\n                            pub('renderLog',newGs2.error,'error')\n                            pub('triggerAI')\n                            return\n                        }\n                        pub('updateGameState',ups,newGs2)\n                        msg === false ? pub('triggerAI') : false\n\n                    },\n                    'launch decoys' : function(msg=false,location=loc,brd=board,gs=currState){\n                        let newGs3 = blockMissileAction(brd,location)\n                        let currWreck = getWr(gs)\n                        let currPl = getPl(gs)\n                        if(Object.prototype.hasOwnProperty.call(newGs3,'error')){\n                            pub('renderLog',newGs3.error,'error')\n                            pub('triggerAI')\n                            return\n                        }\n                        Object.assign(newGs3, {wreckage: currWreck}, {plants : currPl})\n                        pub('updateGameState',ups,newGs3)\n                        msg === false ? pub('triggerAI') : false\n\n                    },\n                    'message' : function(){ \n                        player1.sessionPlayer === null ? updatePlayerWrapper(ups,currState) : false\n                        let msgCurrState = function(){return player1.sessionPlayer.gameState}\n                        let msgBoard = function(){return getBoard(msgCurrState())}\n                        let shipProt = getMess(ship)                      \n                        if(Array.isArray(shipProt) && shipProt[1] === 'relay'){\n                            let initfilterlegals = lgl(board,loc).filter(trgt => getContains(board,trgt) !== null)\n                            let secondFilter = initfilterlegals.filter(trgt => !Object.prototype.hasOwnProperty.call(getA(getContains(board,trgt)),'error'))\n                            let legals = secondFilter.filter(trgt => !Object.prototype.hasOwnProperty.call(getMess(getContains(board,trgt)),'error'))\n                            if(legals.length === 0){pub('triggerAI'); return}\n                            let orbit = []\n                            for(let targetloc of legals){\n                                let trgtShip = getContains(board, targetloc)\n                                let act = getA(trgtShip)[0]\n                                if(act === 'launch decoys'){\n                                    orbit.push([trgtShip, act,targetloc])\n                                }\n                                else{\n                                    orbit.unshift([trgtShip,act,targetloc])\n                                }\n                            }\n                            for(let targets of orbit){\n                                let [targetShip,action,targetLoc] = targets\n                                if(action === 'message' || !Array.isArray(getMess(targetShip)) || getMess(targetShip)[1] !== 'trigger'){\n                                    pub('renderLog', 'Ship messaging protocol is not configured to be triggered','error') \n                                    continue\n                                }\n                                actObj[action](true,targetLoc,msgBoard(),msgCurrState())  \n                            }\n                        pub('triggerAI')\n                        return\n                        }\n                        pub('renderLog','Ship messaging protocol is not configured for messaging','error')\n                        pub('triggerAI')\n                        return                        \n                    },\n                    'legacy' : function(){\n                        pub('triggerAI')\n\n                    }\n\n                }\n                return actObj[actionChoice]()\n\n            }\n            filterAction()\n\n        },\n        build : function(paramArray){\n            const [board,ship,targetLoc,currState] = paramArray\n            let newGs4 = placeShip(board,ship,targetLoc)\n            let currWreck = getWr(currState)\n            let currPl = getPl(currState)\n            if(Object.prototype.hasOwnProperty.call(newGs4,'error')){\n                pub('renderLog',newGs4.error,'error')\n                pub('triggerAI')\n                return\n            }\n            Object.assign(newGs4, {wreckage: currWreck}, {plants : currPl})\n            pub('updateGameState',ups,newGs4)\n            pub('triggerAI')\n            Object.prototype.hasOwnProperty.call(ship,'action') ? pub('triggerAI') : false\n            \n            \n\n        },\n        move : function(paramArray){\n            const [board,loc,target,currState] = paramArray\n            let newGs5 = moveShip(board,loc,target) \n            let currWreck = getWr(currState)\n            let currPl = getPl(currState)\n            if(Object.prototype.hasOwnProperty.call(newGs5,'error')){\n                pub('renderLog',newGs5.error,'error')\n                pub('triggerAI')\n                return\n            }\n            Object.assign(newGs5, {wreckage: currWreck}, {plants : currPl})\n            pub('updateGameState',ups,newGs5)\n            pub('triggerAI')\n\n        },\n        modify : function(paramArray){\n            const [board,loc,changeConf,currState] = paramArray\n            let newGs6 = upgradeShip(board,loc,changeConf,currState)\n            if(Object.prototype.hasOwnProperty.call(newGs6,'error')){\n                pub('renderLog',newGs6.error,'error')\n                pub('triggerAI')\n                return\n            }\n            pub('updateGameState',ups,newGs6)\n            pub('triggerAI')\n            pub('triggerAI')\n\n\n        },\n        'extend component' : function(paramArray){\n            const [board,loc,changeConf,currState] = paramArray\n            let newGs7 = upgradeShip(board,loc,changeConf,currState)\n            if(Object.prototype.hasOwnProperty.call(newGs7,'error')){\n                pub('renderLog',newGs7.error,'error')\n                pub('triggerAI')\n                return\n            }\n            pub('updateGameState',ups,newGs7)\n            pub('triggerAI')\n\n        },\n        'extend ship' : function(){\n            pub('triggerAI')\n\n        }\n    }    \n    \n    return _effectAction[instruction](params)\n}\n\nconst _extendShipSequence = function(paramsArray, ups=_gamestate__WEBPACK_IMPORTED_MODULE_1__.updateState, pub=_gamestate__WEBPACK_IMPORTED_MODULE_1__.gameEvents.publish){\n    let getB = paramsArray[0]\n    paramsArray[0] = getB(player1.sessionPlayer.gameState)\n    paramsArray = [...paramsArray, player1.sessionPlayer.gameState]\n    let newGb = upgradeShip(...paramsArray)\n    if(Object.prototype.hasOwnProperty.call(newGb,'error')){\n        pub('renderLog',newGb.error,'error')\n        pub('triggerAI')\n        return\n    }\n    pub('updateGameState', ups,newGb)\n    return newGb\n}\n\nconst _preventRepeatMissileState = function(getState=_gameboard__WEBPACK_IMPORTED_MODULE_0__.defaultConfig.getState, pub =_gamestate__WEBPACK_IMPORTED_MODULE_1__.gameEvents.publish, ups=_gamestate__WEBPACK_IMPORTED_MODULE_1__.updateState){\n    let missileStates = ['missile hit ship','missile blocked','missile sunk ship','missile missed ship']\n    let oldGs= player1.sessionPlayer.gameState\n    if(missileStates.includes(getState(oldGs))){\n        let newGs = Object.assign(Object.create(Object.getPrototypeOf(oldGs)),oldGs,{state : 'default action'})\n        pub('updateGameState',ups,newGs)\n    }\n}\n\n\nconst subscribePlayerEvts = function(someSubFunc=_gamestate__WEBPACK_IMPORTED_MODULE_1__.gameEvents.subscribe){\n    someSubFunc('initGame', function(name){player1.sessionPlayer = new playerObj(name)}),\n    someSubFunc('playerAction',effectPlayerAction)\n    someSubFunc('extendShip', _extendShipSequence),\n    someSubFunc('updateGameState', updatePlayerWrapper)\n    someSubFunc('triggerAI',_preventRepeatMissileState)\n    \n}\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n//# sourceURL=webpack://solidship/./src/modules/player.js?");

/***/ }),

/***/ "./src/modules/ships.js":
/*!******************************!*\
  !*** ./src/modules/ships.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"basicShip\": () => (/* binding */ basicShip),\n/* harmony export */   \"basicLegacyShip\": () => (/* binding */ basicLegacyShip),\n/* harmony export */   \"legacyShip\": () => (/* binding */ legacyShip),\n/* harmony export */   \"plantingShip\": () => (/* binding */ plantingShip),\n/* harmony export */   \"defenseShip\": () => (/* binding */ defenseShip),\n/* harmony export */   \"relayShip\": () => (/* binding */ relayShip),\n/* harmony export */   \"clearingShip\": () => (/* binding */ clearingShip),\n/* harmony export */   \"components\": () => (/* binding */ components),\n/* harmony export */   \"getDamage\": () => (/* binding */ getDamage),\n/* harmony export */   \"setDamage\": () => (/* binding */ setDamage),\n/* harmony export */   \"getIsSunk\": () => (/* binding */ getIsSunk),\n/* harmony export */   \"setNewShip\": () => (/* binding */ setNewShip),\n/* harmony export */   \"getChangedShip\": () => (/* binding */ getChangedShip),\n/* harmony export */   \"getShipCount\": () => (/* binding */ getShipCount),\n/* harmony export */   \"setShipCount\": () => (/* binding */ setShipCount),\n/* harmony export */   \"setEquipmentType\": () => (/* binding */ setEquipmentType),\n/* harmony export */   \"getEquipmentType\": () => (/* binding */ getEquipmentType),\n/* harmony export */   \"getMessagingProtocol\": () => (/* binding */ getMessagingProtocol),\n/* harmony export */   \"getAction\": () => (/* binding */ getAction),\n/* harmony export */   \"checkMessagingProtocol\": () => (/* binding */ checkMessagingProtocol),\n/* harmony export */   \"checkEquipment\": () => (/* binding */ checkEquipment)\n/* harmony export */ });\n\nconst _basicMethod = {\n    basic : {\n        isSunk(damage, breakpoint){\n            if(damage >= breakpoint){\n                return true\n            }\n            return false\n        }\n    }\n}\n\nconst _templateForCustomShipTypes = class {\n    constructor(action, properties){\n        this.action = action;\n        this.properties = properties\n    }\n}\nObject.assign(_templateForCustomShipTypes.prototype,_basicMethod.basic)\n\nconst _shipMethods = {\n    basic : function(){\n        return Object.assign({},_basicMethod.basic)\n    },\n    legacy : function(){\n        return  new _templateForCustomShipTypes(['legacy'], {messagingProtocol: 'legacy'})\n    },\n    planting : function(){\n        return  new _templateForCustomShipTypes(['seagrass planting'], {\n            messagingProtocol: 'planting',\n            equipment : {\n                type : ['classic'],\n                count : {\n                    plants : 0\n                }\n            }\n        })\n    },\n    defense : function(){\n        return  new _templateForCustomShipTypes(['launch decoys'], {messagingProtocol: 'defense'})\n    },\n    //**Relay method below has been retained here for the sake of completion only. In practice, this is is not available.*/\n    relay : function(){\n        return  new _templateForCustomShipTypes(['message'], {messagingProtocol: ['message','relay']})\n    },\n    //***/\n    clear : function(){\n        return new _templateForCustomShipTypes(['clear debris'], {\n            messagingProtocol: 'clear',\n            equipment : {\n                type: ['classic'],\n                count : {\n                    wreckage: 0\n                }\n            }\n        })\n    }\n}\n\nconst basicShip = class {\n    damage = 0\n    \n    constructor(mode='custom', breakpoint=3){\n        this.mode = mode\n        this.breakpoint = breakpoint\n    }\n}\nObject.assign(basicShip.prototype,_shipMethods.basic())\n\nconst basicLegacyShip = class extends basicShip {\n    damage = this.breakpoint\n    reinforcedBreakpoint = (this.breakpoint * 2) + 1\n\n    constructor(mode, breakpoint){\n        super(mode, breakpoint)    \n    }\n}\n\nconst legacyShip = function(){\n    return Object.assign(_shipMethods.legacy(), new basicShip('legacy',4))\n}\n\nconst plantingShip = function (){\n    return Object.assign(_shipMethods.planting(), new basicShip('planting',3))\n}\n\n\nconst defenseShip = function (){\n    return Object.assign(_shipMethods.defense(), new basicShip('defense',3))\n}\n\n//**Relay method below has been retained here for the sake of completion only. In practice, this is not available.*/\nconst relayShip = function(){            \n    return Object.assign(_shipMethods.relay(), new basicShip('relay',3))\n}\n//***/\n\nconst clearingShip = function(){\n    return Object.assign(_shipMethods.clear(), new basicShip('clear',3))\n}\n\nconst _actionToProtocol = {\n    'legacy' : 'legacy',\n    'seagrass planting': 'planting',\n    'launch decoys' : 'defense',\n    'message' : 'message',\n    'clear debris' : 'clear'\n}\n\nconst components = function(act){\n\n    return {\n        action : {\n            legacy : ['legacy'],\n            planting : ['seagrass planting'],\n            defense : ['launch decoys'],\n            relay : ['message'],\n            clearing : ['clear debris']\n        },\n\n        properties : {\n            messagingProtocol : {\n                integrated : _actionToProtocol[act],\n//**Relay methods below have been retained here for the sake of completion only. In practice, these are not available.*/\n//                receiver : [_actionToProtocol[act], 'trigger'],\n//                sender : [_actionToProtocol[act], 'relay'],\n//***/\n                extendible : [_actionToProtocol[act]],\n                receiverExtension : ['trigger'],\n                relayExtension : ['relay']                   \n            },\n            equipment : {  \n                    type: {\n                        classic : ['classic'],\n                        modern : ['modern']\n                    },\n                    count: {\n                        plantCount : {\n                            plants : 0\n                        },\n                        wreckageCount : {\n                            wreckage : 0\n                        }\n                    }\n                    \n            }\n        }\n    \n    }   \n}\n\nconst getDamage = function(someShip){\n    return someShip.damage\n\n}\n\nconst setDamage = function(someShip,someValue){\n    someShip.damage = someValue\n    return someShip.damage\n\n}\n\nconst getIsSunk = function(someShip){\n   return someShip.isSunk(someShip.damage,someShip.breakpoint)\n\n}\n\n\nconst setNewShip = function(someShip, someShipProps){\n    let propsObj = {}\n    let finalTarget = someShip\n    let falseShip = Object.create(Object.getPrototypeOf(someShip))\n    Object.assign(falseShip,someShip) \n    delete falseShip[someShipProps[0]]\n   \n    for(let elem of someShipProps){\n        propsObj[elem] = Object.assign({}, finalTarget[elem])\n        finalTarget = finalTarget[elem]\n    }\n    let newShip = Object.create(Object.getPrototypeOf(someShip))\n    Object.assign(newShip,falseShip)\n    let newFinalTarget = newShip\n    for(let elem of someShipProps){\n        Object.assign(newFinalTarget, {[elem] : propsObj[elem]})\n        newFinalTarget = newFinalTarget[elem]\n    }\n    return newShip\n\n}\n\nconst _checkForProps = function(someShip, someProps){\n    let target = someProps[someProps.length - 1]\n    let revisedProps = someProps.filter(elem => elem !== target)\n    let result = []\n    let inside = someShip\n    for(let elem of revisedProps){\n        if(Object.prototype.hasOwnProperty.call(inside,elem)){\n            result = [...result,elem]\n        }\n        else{\n            break\n        }\n        inside = inside[elem]\n    }\n    return result\n}\n\n\n const getChangedShip = function(previousShip, changePath, key){\n    let targetKey = changePath[changePath.length - 1]\n       \n    let _haves = _checkForProps(previousShip, changePath)\n          \n    let ship = (function(){\n        if(_haves.length > 0){\n            return setNewShip(previousShip,_haves)\n        }\n        return Object.assign(Object.create(Object.getPrototypeOf(previousShip)),previousShip)\n       })() \n       \n\n       const _iterateThroughProperties = function(someRef){   \n        let finalTarget = ship     \n        for(let elem of changePath){\n            if(!Object.prototype.hasOwnProperty.call(finalTarget,elem)){ \n                finalTarget[elem] = {}\n            }\n            if(elem === targetKey){ \n              Object.assign(finalTarget,{[targetKey] : someRef[elem][key]})\n            }\n            finalTarget = finalTarget[elem]\n            someRef = someRef[elem]    \n        }\n    }\n       if(targetKey === 'messagingProtocol'){ \n           if(ship.action){\n            let ref = components(ship.action[0])\n            _iterateThroughProperties(ref)\n            return ship\n           }\n           return {error : 'Ship does not have a valid action property'}\n       }\n       let ref = components()\n       _iterateThroughProperties(ref)\n       return ship\n   }\n\nconst getShipCount = function(ship){\n    let checked = ['properties','equipment']\n    let shipSearch = ship\n    for(let elem of checked){\n        if(!Object.prototype.hasOwnProperty.call(shipSearch,elem)){\n            return {error : 'Ship does not have a valid equipment property'}\n        }\n        shipSearch = shipSearch[elem]\n    }\n    if(!Object.prototype.hasOwnProperty.call(shipSearch,'count')){\n        return {error : 'Ship does not have a valid count property'}\n    }\n    return ship.properties.equipment.count\n\n}\n\nconst setShipCount = function(ship, propsObj){\n    let count = getShipCount(ship)\n    if(count.error){\n        return {error : count.error}\n    }\n    ship.properties.equipment.count = Object.assign(count, propsObj)\n    return ship \n}\n\nconst setEquipmentType = function(ship, typeArray){\n    let type = getEquipmentType(ship)\n    if(type.error){\n        return {error : type.error}\n    }\n    ship.properties.equipment.type = typeArray\n    return ship \n}\n\n\nconst getEquipmentType = function(ship){\n    let checked = ['properties','equipment']\n    let shipSearch = ship\n    for(let elem of checked){\n        if(!Object.prototype.hasOwnProperty.call(shipSearch,elem)){\n            return {error : 'Ship does not have a valid equipment property'}\n        }\n        shipSearch = shipSearch[elem]\n    }\n    if(!Object.prototype.hasOwnProperty.call(shipSearch,'type')){\n        return {error : 'Ship does not have a valid type property'}\n    }\n    return ship.properties.equipment.type\n}\n\nconst getMessagingProtocol = function(ship){\n    if(!Object.prototype.hasOwnProperty.call(ship,'properties')){\n        return {error : 'Ship does not have properties installed'}\n    }\n    else if(!Object.prototype.hasOwnProperty.call(ship.properties,'messagingProtocol')){\n        return {error : 'Ship does not have messagingProtocol installed'}\n    }\n    return ship.properties.messagingProtocol\n\n}\n\nconst getAction = function(ship){\n    if(!Object.prototype.hasOwnProperty.call(ship,'action')){\n        return {error : 'Ship does not have action installed'}\n    }\n    return ship.action\n    \n}\n\n\nconst checkMessagingProtocol = function(ship){\n    let messageProt = getMessagingProtocol(ship)\n    let acts = getAction(ship)\n    let firstParam = Array.isArray(messageProt) ? messageProt[0] : messageProt\n    if(_actionToProtocol[acts[0]] === firstParam){\n        return ship\n    }\n    return {error : 'Primary ship action is incompatible with messaging protocol.'}\n\n}\n\nconst checkEquipment = function(ship, choice){\n    if(choice === 'seagrass planting' || choice === 'clear debris'){\n        let compatiblityObj = {\n            'seagrass planting' : 'plants',\n            'clear debris' : 'wreckage'\n        }\n        let type = getEquipmentType(ship)\n        let count = getShipCount(ship)\n        if(Object.prototype.hasOwnProperty.call(type,'error')){\n            return type\n        }\n        if(Object.prototype.hasOwnProperty.call(count,compatiblityObj[choice])){\n            return ship\n        }\n        else {\n            return {error : 'Ship equipment is not configured for this type of action'}\n        }\n    }\n    return ship\n}\n\n\n\n\n\n\n//# sourceURL=webpack://solidship/./src/modules/ships.js?");

/***/ }),

/***/ "./src/modules/utils.js":
/*!******************************!*\
  !*** ./src/modules/utils.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"camelPhraseParser\": () => (/* binding */ camelPhraseParser),\n/* harmony export */   \"renderImage\": () => (/* binding */ renderImage)\n/* harmony export */ });\nlet camelMatcher = /[a-z]+([A-Z][a-z]+)*[A-Z]?/g\n\nconst fromCamelToNorm = function(str){\n    let newStrArr = str.split('')\n    let first = newStrArr[0]\n    newStrArr = [...newStrArr]\n    newStrArr.splice(0,1)\n    let currInd = 0\n    for(let elem of newStrArr){\n        currInd += 1\n        if(currInd === newStrArr.length - 1){\n            break\n        }\n        if(elem === elem.toUpperCase()){\n            newStrArr = [...newStrArr]\n            newStrArr.splice(currInd-1,0,' ')\n            currInd += 1 \n        }\n    }\n    let newStr = [first.toUpperCase(), ...newStrArr].join('')\n    return newStr        \n}\n\nconst fromNormToCamel = function(str){\n    let newStrArr = str.split('')\n    let first = newStrArr[0]\n    newStrArr = [...newStrArr]\n    newStrArr.splice(0,1)\n    newStrArr = [...newStrArr.filter(lett => lett !== ' ')]\n    newStrArr = [first.toLowerCase(), ...newStrArr]\n    let newStr = newStrArr.join('')\n    return newStr\n\n}\n\nconst camelPhraseParser = function(str){\n    str = (str).toString()\n    if(str.match(camelMatcher)){\n        return fromCamelToNorm(str)\n    }\n    else if(str.match(/(\\s)/g)){\n        return fromNormToCamel(str)\n    }\n    return str   \n}\n\nconst _fetchAsset = async function(assetName){\n    try {\n        const image = new Request(`../src/assets/${assetName}`)\n        const response = await fetch(image)\n        const data = await response.text()\n        return data\n    }\n    catch (error){\n        console.log(error)\n\n    }\n}\n\nconst renderImage = async function(node,assetName){\n    try {\n        const data = await _fetchAsset(assetName)\n        node.innerHTML = data\n    }\n    catch(error){\n        console.log(error)\n    }\n}\n\n\n//# sourceURL=webpack://solidship/./src/modules/utils.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;